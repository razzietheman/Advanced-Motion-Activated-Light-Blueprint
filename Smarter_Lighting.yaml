blueprint:
  name: Motion-Controlled Lighting 4.9 – Robust Release with Correct LUX & Day/Night Failsafe
  description: >
    Motion-controlled lighting with day/night, scenes, lux threshold, sunrise/sunset offsets,
    workday sensor, failsafe timers, fixed off-times, snapshots, and logging. Auto-off timers run only if no fixed off-time is active.
  domain: automation
  input:

    # --- Sensors & Switches ---
    
    motion_sensors:
      name: Motion Sensor(s)
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    optional_switches:
      name: Optional Manual Switch
      default: []
      selector:
        entity:
          domain: switch
          multiple: true

    # --- Lights & Scenes ---
    
    main_lights:
      name: Main Lights
      default: []
      selector:
        target:
          entity:
            domain: light

    scene_day:
      name: Day Scene
      default: []
      selector:
        entity:
          domain: scene
          multiple: false

    scene_night:
      name: Night Scene
      default: []
      selector:
        entity:
          domain: scene
          multiple: false

    day_lights:
      name: Day Lights
      default: []
      selector:
        target:
          entity:
            domain: light

    night_lights:
      name: Night Lights
      default: []
      selector:
        target:
          entity:
            domain: light

    # --- Lux & Sun ---
    
    lux_sensor:
      name: Lux Sensor
      default: []
      selector:
        entity:
          domain: sensor
          device_class: illuminance

    lux_threshold:
      name: Lux Threshold
      default: 50
      selector:
        number:
          min: 0
          max: 1000
          step: 1
          unit_of_measurement: lx

    use_sun_times:
      name: Use Sunrise/Sunset Times
      default: false
      selector:
        boolean: {}

    sunrise_offset:
      name: Sunrise Offset
      default: "00:00:00"
      selector:
        time: {}

    sunset_offset:
      name: Sunset Offset
      default: "00:00:00"
      selector:
        time: {}

    # --- Fixed Off-Times ---
    
    fixed_off_time_1:
      name: Fixed Off-Time 1
      default: []
      selector:
        time: {}

    fixed_off_weekdays_1:
      name: Active Weekdays (Off-Time 1)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    fixed_off_time_2:
      name: Fixed Off-Time 2
      default: []
      selector:
        time: {}

    fixed_off_weekdays_2:
      name: Active Weekdays (Off-Time 2)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    # --- Time Settings ---
    
    day_start:
      name: Day Start
      default: "07:00:00"
      selector:
        time: {}

    day_end:
      name: Day End
      default: "22:00:00"
      selector:
        time: {}

    night_start:
      name: Night Start
      default: "22:00:01"
      selector:
        time: {}

    night_end:
      name: Night End
      default: "07:00:00"
      selector:
        time: {}

    active_weekdays_day:
      name: Active Weekdays (Day)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    active_weekdays_night:
      name: Active Weekdays (Night)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    # --- Workday & Failsafe ---
    
    workday_sensor:
      name: Workday Sensor
      default: []
      selector:
        entity:
          domain: binary_sensor

    enable_failsafe:
      name: Enable Failsafe
      default: true
      selector:
        boolean: {}

    failsafe_timer_day:
      name: Failsafe Timer Day (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min

    failsafe_timer_night:
      name: Failsafe Timer Night (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min

    input_text_last_scene:
      name: Input Text – Last Scene
      default: []
      selector:
        entity:
          domain: input_text

    # --- Auto-Off Timers ---
    
    auto_off_main:
      name: Main Lights Duration (minutes)
      default: 10
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
          mode: box

    auto_off_day:
      name: Day Lights Duration (minutes)
      default: 5
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
          mode: box

    auto_off_night:
      name: Night Lights Duration (minutes)
      default: 1
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
          mode: box

# --- Triggers & Mode ---

trigger:
  - platform: state
    entity_id: !input motion_sensors
    id: motion_on
  - platform: state
    entity_id: !input optional_switches
    id: switch_on
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
  - platform: sun
    event: sunset
    offset: !input sunset_offset
  - platform: time
    at: !input fixed_off_time_1
    id: fixed_off_1
  - platform: time
    at: !input fixed_off_time_2
    id: fixed_off_2

mode: restart

# --- Variables ---

variables:
  main_lights_var: !input main_lights
  day_lights_var: !input day_lights
  night_lights_var: !input night_lights
  scene_day_var: !input scene_day
  scene_night_var: !input scene_night
  last_scene_entity: !input input_text_last_scene
  lux_sensor_var: !input lux_sensor
  lux_threshold_var: !input lux_threshold
  use_sun_times_var: !input use_sun_times
  workday_sensor_var: !input workday_sensor
  auto_off_main_var: !input auto_off_main
  auto_off_day_var: !input auto_off_day
  auto_off_night_var: !input auto_off_night
  fixed_off_weekdays_1_var: !input fixed_off_weekdays_1
  fixed_off_weekdays_2_var: !input fixed_off_weekdays_2
  day_start_var: !input day_start
  day_end_var: !input day_end
  night_start_var: !input night_start
  night_end_var: !input night_end
  active_weekdays_day_var: !input active_weekdays_day
  active_weekdays_night_var: !input active_weekdays_night
  enable_failsafe_var: !input enable_failsafe
  failsafe_timer_day_var: !input failsafe_timer_day
  failsafe_timer_night_var: !input failsafe_timer_night

condition: []

# --- Actions ---

action:

  # --- Motion / Switch ON ---
  
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: template
            value_template: >
              {% if lux_sensor_var == [] %}
                true
              {% else %}
                {% set val = states(lux_sensor_var[0]) %}
                {% if val in ['unknown','unavailable'] %}
                  false
                {% else %}
                  {{ val | float < lux_threshold_var }}
                {% endif %}
              {% endif %}
          - condition: template
            value_template: >
              {% if not use_sun_times_var %}
                {% set t = now().time() %}
                {% set start = strptime(day_start_var, '%H:%M:%S').time() %}
                {% set end = strptime(day_end_var, '%H:%M:%S').time() %}
                {% if start <= end %} {{ t >= start and t <= end }}
                {% else %} {{ t >= start or t <= end }} {% endif %}
              {% else %} true {% endif %}
          - condition: template
            value_template: >
              {% if workday_sensor_var == [] %} true
              {% else %} {{ is_state(workday_sensor_var[0],'on') }} {% endif %}
        sequence:

          # --- Snapshot ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ main_lights_var | length > 0 }}"
                sequence:
                  - service: scene.create
                    data:
                      scene_id: snapshot_before_on
                      snapshot_entities: "{{ main_lights_var }}"

          # --- Day Scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set t = now().time() %}
                      {% set start = strptime(day_start_var, '%H:%M:%S').time() %}
                      {% set end = strptime(day_end_var, '%H:%M:%S').time() %}
                      {% if start <= end %} {{ t >= start and t <= end }}
                      {% else %} {{ t >= start or t <= end }} {% endif %}
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_day_var | length > 0 }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: "{{ scene_day_var[0] }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ day_lights_var | length > 0 }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ day_lights_var }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ main_lights_var | length > 0 }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ main_lights_var }}"

          # --- Night Scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set t = now().time() %}
                      {% set start = strptime(night_start_var, '%H:%M:%S').time() %}
                      {% set end = strptime(night_end_var, '%H:%M:%S').time() %}
                      {% if start <= end %} {{ t >= start and t <= end }}
                      {% else %} {{ t >= start or t <= end }} {% endif %}
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_night_var | length > 0 }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: "{{ scene_night_var[0] }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ night_lights_var | length > 0 }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ night_lights_var }}"
                      - conditions:
                          - condition: template
                            value_template: "{{ main_lights_var | length > 0 }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ main_lights_var }}"

          # --- Save Last Scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity | length > 0 }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: "{{ last_scene_entity[0] }}"
                      value: "day/night ON"

          # --- Logging ---
          
          - service: logbook.log
            data:
              name: Motion Control
              message: "Day/night ON triggered by motion or switch."

  # --- Motion / Switch OFF with Auto-Off ---
  
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_off
              - condition: trigger
                id: switch_off
        sequence:
          - delay:
              minutes: "{{ auto_off_main_var }}"
          - service: light.turn_off
            target:
              entity_id: "{{ main_lights_var }}"
          - delay:
              minutes: "{{ auto_off_day_var }}"
          - service: light.turn_off
            target:
              entity_id: "{{ day_lights_var }}"
          - delay:
              minutes: "{{ auto_off_night_var }}"
          - service: light.turn_off
            target:
              entity_id: "{{ night_lights_var }}"
          - service: logbook.log
            data:
              name: Motion Control
              message: >
                Auto-off completed: Main lights {{ auto_off_main_var }} min,
                Day lights {{ auto_off_day_var }} min,
                Night lights {{ auto_off_night_var }} min.

  # --- Fixed Off-Times ---
  
  - choose:
      - conditions:
          - condition: trigger
            id: fixed_off_1
          - condition: template
            value_template: "{{ now().strftime('%a').lower() in fixed_off_weekdays_1_var }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ main_lights_var + day_lights_var + night_lights_var }}"
          - service: logbook.log
            data:
              name: Motion Control
              message: "Fixed Off-Time 1 executed."
      - conditions:
          - condition: trigger
            id: fixed_off_2
          - condition: template
            value_template: "{{ now().strftime('%a').lower() in fixed_off_weekdays_2_var }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ main_lights_var + day_lights_var + night_lights_var }}"
          - service: logbook.log
            data:
              name: Motion Control
              message: "Fixed Off-Time 2 executed."

  # --- Failsafe Day/Night ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var }}"
        sequence:
          - variables:
              failsafe_types:
                - { name: "day", timer: failsafe_timer_day_var, lights: day_lights_var + main_lights_var }
                - { name: "night", timer: failsafe_timer_night_var, lights: night_lights_var + main_lights_var }
          - repeat:
              count: "{{ failsafe_types | length }}"
              sequence:
                - variables:
                    fs: "{{ failsafe_types[repeat.index - 1] }}"
                - delay:
                    minutes: "{{ fs.timer }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: >
                            {% set motion_ok = motion_sensors | length > 0 and is_state(motion_sensors[0], 'off') %}
                            {% set motion_missing = motion_sensors | length == 0 %}
                            {{ motion_ok or motion_missing }}
                      sequence:
                        - service: light.turn_off
                          target:
                            entity_id: "{{ fs.lights }}"
                        - service: logbook.log
                          data:
                            name: Motion Control
                            message: >
                              Failsafe {{ fs.name }}: Lights turned off after {{ fs.timer }} min without motion or sensor missing.
