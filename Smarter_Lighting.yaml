blueprint:
  name: Motion-activated Lighting 3.3 – Full Corrected Version
  description: >
    Control lights with motion sensors, optional manual switches, scenes,
    time schedules, sun triggers, lux threshold, workday sensor, and failsafe timer.
  domain: automation
  input:
    motion_sensors:
      name: Motion Sensor(s)
      selector:
        entity:
          domain: binary_sensor
          multiple: true
    optional_switches:
      name: Optional Manual Switch
      default: []
      selector:
        entity:
          domain: switch
          multiple: true
    light_entity:
      name: Lights
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    scene_day:
      name: Day Scene
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
    scene_night:
      name: Night Scene
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
    day_lights:
      name: Day Lights (optional)
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    night_lights:
      name: Night Lights (optional)
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    lux_sensor:
      name: Lux Sensor (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false
    lux_threshold:
      name: Lux Threshold
      default: 50
      selector:
        number:
          min: 0
          max: 1000
          step: 1
          unit_of_measurement: lx
    use_sun_times:
      name: Use Sunrise/Sunset
      default: false
      selector:
        boolean: {}
    sunset_offset:
      name: Sunset Offset
      default: "00:00:00"
      selector:
        text: {}
    sun_trigger_text:
      name: Input Text for Sun Trigger
      default: []
      selector:
        entity:
          domain: input_text
    day_start:
      name: Day Start
      default: "07:00:00"
      selector:
        time: {}
    day_end:
      name: Day End
      default: "22:00:00"
      selector:
        time: {}
    night_start:
      name: Night Start
      default: "22:00:00"
      selector:
        time: {}
    night_end:
      name: Night End
      default: "07:00:00"
      selector:
        time: {}
    active_weekdays_day:
      name: Active Weekdays (Day)
      default: [mon, tue, wed, thu, fri]
      selector:
        select:
          multiple: true
          options: [mon, tue, wed, thu, fri, sat, sun]
    active_weekdays_night:
      name: Active Weekdays (Night)
      default: []
      selector:
        select:
          multiple: true
          options: []
    workday_sensor:
      name: Workday Sensor (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: false
    failsafe_timer_day:
      name: Failsafe Timer Day (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
    failsafe_timer_night:
      name: Failsafe Timer Night (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
    input_text_last_scene:
      name: Input Text – Last Scene
      default: []
      selector:
        entity:
          domain: input_text
    light_duration_day:
      name: Light Duration Day (minutes)
      default: 2
      selector:
        number:
          min: 0.1
          max: 120
          step: 0.5
          unit_of_measurement: minutes
          mode: box
    light_duration_night:
      name: Light Duration Night (minutes)
      default: 1
      selector:
        number:
          min: 0.1
          max: 120
          step: 0.5
          unit_of_measurement: minutes
          mode: box

trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: motion_on
  - platform: state
    entity_id: !input motion_sensors
    from: "on"
    to: "off"
    id: motion_off
  - platform: state
    entity_id: !input optional_switches
    to: "on"
    id: switch_on
  - platform: state
    entity_id: !input light_entity
    to: "on"
    id: light_on
  - platform: sun
    event: sunrise
    id: sun_rise
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sun_set

mode: parallel
max: 100

variables:
  lux_sensor: !input lux_sensor
  lux_threshold: !input lux_threshold
  scene_day: !input scene_day
  scene_night: !input scene_night
  day_lights: !input day_lights
  night_lights: !input night_lights
  workday_sensor: !input workday_sensor
  sun_trigger_text: !input sun_trigger_text
  use_sun_times: !input use_sun_times
  failsafe_timer_day: !input failsafe_timer_day
  failsafe_timer_night: !input failsafe_timer_night
  light_duration_day: !input light_duration_day
  light_duration_night: !input light_duration_night
  last_scene_entity: !input input_text_last_scene

condition: []

action:
  # Day mode
  - choose:
      - conditions:
          - condition: trigger
            id: motion_on
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ lux_sensor == [] }}"
              - condition: numeric_state
                entity_id: !input lux_sensor
                below: !input lux_threshold
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ not use_sun_times }}"
                  - condition: time
                    after: !input day_start
                    before: !input day_end
                    weekday: !input active_weekdays_day
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ use_sun_times }}"
                  - condition: sun
                    after: sunrise
          - condition: template
            value_template: >-
              {% set w = workday_sensor %}
              {% if w == [] %} true {% else %} is_state(w, 'on') {% endif %}
        sequence:
          - choose:
              - conditions: "{{ scene_day != [] }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_day
            default:
              - service: light.turn_on
                target:
                  entity_id: !input day_lights
          - choose:
              - conditions: "{{ last_scene_entity != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input input_text_last_scene
                      value: "day"
          - service: logbook.log
            data:
              name: Motion Lighting
              message: "Day mode activated via motion."

  # Night mode
  - choose:
      - conditions:
          - condition: trigger
            id: motion_on
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ lux_sensor == [] }}"
              - condition: numeric_state
                entity_id: !input lux_sensor
                below: !input lux_threshold
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ not use_sun_times }}"
                  - condition: time
                    after: !input night_start
                    before: !input night_end
                    weekday: !input active_weekdays_night
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ use_sun_times }}"
                  - condition: sun
                    after: sunset
          - condition: template
            value_template: >-
              {% set w = workday_sensor %}
              {% if w == [] %} true {% else %} is_state(w, 'on') {% endif %}
        sequence:
          - choose:
              - conditions: "{{ scene_night != [] }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_night
            default:
              - service: light.turn_on
                target:
                  entity_id: !input night_lights
          - choose:
              - conditions: "{{ last_scene_entity != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input input_text_last_scene
                      value: "night"
          - choose:
              - conditions: "{{ sun_trigger_text != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input sun_trigger_text
                      value: "sun trigger activated"
          - service: logbook.log
            data:
              name: Motion Lighting
              message: "Night mode activated via motion or sun trigger."

  # Motion off & Failsafe combined
  - choose:
      - conditions:
          - condition: trigger
            id: motion_off
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ light_entity != [] }}"
              - condition: template
                value_template: "{{ day_lights != [] or night_lights != [] }}"
        sequence:
          - choose:
              - conditions: "{{ last_scene_entity != [] and is_state(last_scene_entity, 'day') }}"
                sequence:
                  - delay:
                      seconds: "{{ (light_duration_day * 60) | int }}"
                  - condition: state
                    entity_id: !input motion_sensors
                    state: "off"
                  - service: light.turn_off
                    target:
                      entity_id: >
                        {% if light_entity != [] %}
                          {{ light_entity }}
                        {% else %}
                          {{ day_lights }}
                        {% endif %}
                    data:
                      transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Lighting
                      message: "Day mode turned off gradually after inactivity."
              - conditions: "{{ last_scene_entity != [] and is_state(last_scene_entity, 'night') }}"
                sequence:
                  - delay:
                      seconds: "{{ (light_duration_night * 60) | int }}"
                  - condition: state
                    entity_id: !input motion_sensors
                    state: "off"
                  - service: light.turn_off
                    target:
                      entity_id: >
                        {% if light_entity != [] %}
                          {{ light_entity }}
                        {% else %}
                          {{ night_lights }}
                        {% endif %}
                    data:
                      transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Lighting
                      message: "Night mode turned off gradually after inactivity."
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: light_on
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ light_entity != [] }}"
              - condition: template
                value_template: "{{ day_lights != [] or night_lights != [] }}"
        sequence:
          - delay:
              minutes: >
                {% if last_scene_entity != [] %}
                  {% set scene = states(last_scene_entity) %}
                  {{ failsafe_timer_day if scene == 'day' else failsafe_timer_night }}
                {% else %}
                  {{ failsafe_timer_day }}
                {% endif %}
          - condition: state
            entity_id: !input motion_sensors
            state: "off"
          - service: light.turn_off
            target:
              entity_id: >
                {% if light_entity != [] %}
                  {{ light_entity }}
                {% elif day_lights != [] and is_state(last_scene_entity, 'day') %}
                  {{ day_lights }}
                {% elif night_lights != [] and is_state(last_scene_entity, 'night') %}
                  {{ night_lights }}
                {% else %}
                  []
                {% endif %}
            data:
              transition: 30
          - service: logbook.log
            data:
              name: Motion Lighting
              message: >
                Failsafe: Light turned off gradually after timeout. {% if last_scene_entity != [] %}Last scene: {{ states(last_scene_entity) }}.{% endif %}
