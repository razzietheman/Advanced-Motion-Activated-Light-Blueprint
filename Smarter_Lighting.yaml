blueprint:
  name: Motion-Controlled Lighting 3.8 â€“ Fully optional with two fixed times, weekdays, and fully dynamic with sun, workday, and failsafe
  description: >
    Control optional lighting with one or more motion sensors, time, sunrise/sunset,
    lux threshold, workday control, snapshot restore, and failsafe timer.
    Includes two optional fixed off times with separate weekdays.
  domain: automation
  input:
    # --- Sensors & switches ---
    motion_sensors:
      name: Motion sensor(s) (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true
          
    optional_switches:
      name: Optional manual switch
      default: []
      selector:
        entity:
          domain: switch
          multiple: true

    # --- Lights & scenes ---
    light_entity:
      name: Lights (optional)
      default: []
      selector:
        entity:
          domain: light
          multiple: true

    scene_day:
      name: Day scene (optional)
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
          
    scene_night:
      name: Night scene (optional)
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
          
    day_lights:
      name: Day lights (optional)
      default: []
      selector:
        entity:
          domain: light
          multiple: true
          
    night_lights:
      name: Night lights (optional)
      default: []
      selector:
        entity:
          domain: light
          multiple: true
          
    # --- Lux & sun ---
    lux_sensor:
      name: Lux sensor (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false
          
    lux_threshold:
      name: Lux threshold
      default: 50
      selector:
        number:
          min: 0
          max: 1000
          step: 1
          unit_of_measurement: lx
          
    use_sun_times:
      name: Use sunrise/sunset
      default: false
      selector:
        boolean: {}
        
    sunset_offset:
      name: Sunset offset
      description: Adjustment in hh:mm:ss for sunset (e.g. -00:30:00 for 30 min before).
      default: "00:00:00"
      selector:
        text: {}
        
    sunrise_offset:
      name: Sunrise offset
      description: Adjustment in hh:mm:ss for sunrise (e.g. +00:20:00 for 20 min after).
      default: "00:00:00"
      selector:
        text: {}
        
    sun_trigger_text:
      name: Input Text for sun-trigger (optional)
      default: []
      selector:
        entity:
          domain: input_text

    # --- Fixed off times ---
    fixed_off_time_1:
      name: Fixed off time 1 (optional)
      default: []
      selector:
        time: {}
        
    fixed_off_weekdays_1:
      name: Active weekdays (Fixed time 1)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    fixed_off_time_2:
      name: Fixed off time 2 (optional)
      default: []
      selector:
        time: {}
        
    fixed_off_weekdays_2:
      name: Active weekdays (Fixed time 2)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    # --- Time settings ---
    day_start:
      name: Day start (optional)
      default: "07:00:00"
      selector:
        time: {}
        
    day_end:
      name: Day end (optional)
      default: "22:00:00"
      selector:
        time: {}
        
    night_start:
      name: Night start (optional)
      default: "22:00:00"
      selector:
        time: {}
        
    night_end:
      name: Night end (optional)
      default: "07:00:00"
      selector:
        time: {}
        
    active_weekdays_day:
      name: Active weekdays (Day, optional)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
              
    active_weekdays_night:
      name: Active weekdays (Night, optional)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    # --- Day/Night fixed off periods (NEW!) ---
    day_off_start:
      name: Day off start (optional)
      default: "12:00:00"
      selector:
        time: {}

    day_off_end:
      name: Day off end (optional)
      default: "13:00:00"
      selector:
        time: {}

    night_off_start:
      name: Night off start (optional)
      default: "23:00:00"
      selector:
        time: {}

    night_off_end:
      name: Night off end (optional)
      default: "06:00:00"
      selector:
        time: {}

    # --- Workday & failsafe ---
    workday_sensor:
      name: Workday sensor (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: false
          
    enable_failsafe:
      name: Enable failsafe
      default: true
      selector:
        boolean: {}
        
    failsafe_timer_day:
      name: Failsafe timer day (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
          
    failsafe_timer_night:
      name: Failsafe timer night (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
          
    input_text_last_scene:
      name: Input Text â€“ Last scene (optional)
      default: []
      selector:
        entity:
          domain: input_text

    # --- Turn-on delays ---
    turn_on_delay_day:
      name: Turn-on delay day (minutes)
      default: 2
      selector:
        number:
          min: 0.5
          max: 120
          step: 0.5
          unit_of_measurement: minutes
          mode: box
          
    turn_on_delay_night:
      name: Turn-on delay night (minutes)
      default: 1
      selector:
        number:
          min: 0.5
          max: 120
          step: 0.5
          unit_of_measurement: minutes
          mode: box

# --- TRIGGERS ---
trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: motion_on
  - platform: state
    entity_id: !input motion_sensors
    to: "off"
    id: motion_off
  - platform: state
    entity_id: !input light_entity
    to: "on"
    id: light_on
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sun_set
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: sun_rise
  - platform: time
    at: !input fixed_off_time_1
    id: fixed_off_1
  - platform: time
    at: !input fixed_off_time_2
    id: fixed_off_2

mode: parallel
max: 100

# --- VARIABLES ---
variables:
  light_entity_list: !input light_entity
  day_lights: !input day_lights
  night_lights: !input night_lights
  scene_day: !input scene_day
  scene_night: !input scene_night
  last_scene_entity: !input input_text_last_scene
  lux_sensor: !input lux_sensor
  lux_threshold: !input lux_threshold
  use_sun_times: !input use_sun_times
  sunset_offset: !input sunset_offset
  sunrise_offset: !input sunrise_offset
  sun_trigger_text: !input sun_trigger_text
  workday_sensor: !input workday_sensor
  enable_failsafe: !input enable_failsafe
  failsafe_timer_day: !input failsafe_timer_day
  failsafe_timer_night: !input failsafe_timer_night
  fixed_off_time_1: !input fixed_off_time_1
  fixed_off_weekdays_1: !input fixed_off_weekdays_1
  fixed_off_time_2: !input fixed_off_time_2
  fixed_off_weekdays_2: !input fixed_off_weekdays_2

condition: []

# --- ACTIONS ---

action:
  - choose:
      # --- DAY MODE via motion or manual switch ---
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: template
            value_template: >
              {% set ls = lux_sensor %}
              {% if ls == [] %} true
              {% else %} (states(ls) | float(9999)) < lux_threshold
              {% endif %}
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ not use_sun_times }}"
                  - condition: time
                    after: !input day_start
                    before: !input day_end
                    weekday: !input active_weekdays_day
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ use_sun_times }}"
                  - condition: sun
                    after: sunrise
          - condition: template
            value_template: >
              {% set w = workday_sensor %}
              {% if w == [] %}
                true
              {% else %}
                is_state(w, 'on')
              {% endif %}
        sequence:
          # Snapshot if main lights exist
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: scene.create
                    data:
                      scene_id: before_day_scene
                      snapshot_entities: !input light_entity
          # Priority: day_scene -> day_lights -> main lights
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ scene_day != [] }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_day
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input day_lights
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input light_entity
          # Save last scene
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input input_text_last_scene
                      value: "day"
          - service: logbook.log
            data:
              name: Motion Control
              message: "Day mode activated via motion/manual."

      # --- NIGHT MODE via motion or manual switch ---
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ not use_sun_times }}"
                  - condition: time
                    after: !input night_start
                    before: !input night_end
                    weekday: !input active_weekdays_night
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ use_sun_times }}"
                  - condition: sun
                    after: sunset
          - condition: template
            value_template: >
              {% set ls = lux_sensor %}
              {% if ls == [] %} true
              {% else %} (states(ls) | float(9999)) < lux_threshold
              {% endif %}
          - condition: template
            value_template: >
              {% set w = workday_sensor %}
              {% if w == [] %}
                true
              {% else %}
                is_state(w, 'on')
              {% endif %}
        sequence:
          # Snapshot if main lights exist
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: scene.create
                    data:
                      scene_id: before_night_scene
                      snapshot_entities: !input light_entity
          # Priority: night_scene -> night_lights -> main lights
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ scene_night != [] }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_night
              - conditions:
                  - condition: template
                    value_template: "{{ night_lights != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input night_lights
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input light_entity
          # Save last scene
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input input_text_last_scene
                      value: "night"
          - service: logbook.log
            data:
              name: Motion Control
              message: "Night mode activated via motion/manual."

      # --- DAY/NIGHT via sun-trigger ---
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: sun_rise
              - condition: trigger
                id: sun_set
        sequence:
          - choose:
              # Sun after sunrise => Day
              - conditions:
                  - condition: sun
                    after: sunrise
                    after_offset: !input sunrise_offset
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: scene.create
                            data:
                              scene_id: before_day_scene
                              snapshot_entities: !input light_entity
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_day != [] }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input scene_day
                      - conditions:
                          - condition: template
                            value_template: "{{ day_lights != [] }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: !input day_lights
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: !input light_entity
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ last_scene_entity != [] }}"
                        sequence:
                          - service: input_text.set_value
                            data:
                              entity_id: !input input_text_last_scene
                              value: "day"
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Day mode activated via sun-trigger."
              # Sun after sunset => Night
              - conditions:
                  - condition: sun
                    after: sunset
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: scene.create
                            data:
                              scene_id: before_night_scene
                              snapshot_entities: !input light_entity
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_night != [] }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: !input scene_night
                      - conditions:
                          - condition: template
                            value_template: "{{ night_lights != [] }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: !input night_lights
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: !input light_entity
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ last_scene_entity != [] }}"
                        sequence:
                          - service: input_text.set_value
                            data:
                              entity_id: !input input_text_last_scene
                              value: "night"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ sun_trigger_text != [] }}"
                        sequence:
                          - service: input_text.set_value
                            data:
                              entity_id: !input sun_trigger_text
                              value: "sun-trigger activated"
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Night mode activated via sun-trigger."

      # --- GRADUAL OFF via motion ---
      - conditions:
          - condition: trigger
            id: motion_off
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ light_entity_list != [] }}"
              - condition: template
                value_template: "{{ day_lights != [] or night_lights != [] }}"
        sequence:
          # Day branch
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] and is_state(last_scene_entity, 'day') }}"
                sequence:
                  - delay:
                      seconds: "{{ (turn_on_delay_day * 60) | int }}"
                  - condition: state
                    entity_id: !input motion_sensors
                    state: "off"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ day_lights != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input day_lights
                            data:
                              transition: 30
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input light_entity
                            data:
                              transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Day lights turned off after delay."
              # Night branch
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] and is_state(last_scene_entity, 'night') }}"
                sequence:
                  - delay:
                      seconds: "{{ (turn_on_delay_night * 60) | int }}"
                  - condition: state
                    entity_id: !input motion_sensors
                    state: "off"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ night_lights != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input night_lights
                            data:
                              transition: 30
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input light_entity
                            data:
                              transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Night lights turned off after delay."
      # --- FIXED OFF TIMES ---
      - conditions:
          - condition: trigger
            id: fixed_off
        sequence:
          - choose:
              # Day fixed off
              - conditions:
                  - condition: time
                    after: !input day_off_start
                    before: !input day_off_end
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ day_lights != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input day_lights
                            data:
                              transition: 30
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input light_entity
                            data:
                              transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Day fixed off executed."
              # Night fixed off
              - conditions:
                  - condition: time
                    after: !input night_off_start
                    before: !input night_off_end
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ night_lights != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input night_lights
                            data:
                              transition: 30
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input light_entity
                            data:
                              transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Night fixed off executed."

      # --- FAILSAFE TIMER ---
      - conditions:
          - condition: trigger
            id: failsafe_timer
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light_entity
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input day_lights
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ night_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input night_lights
                    data:
                      transition: 30
          - service: logbook.log
            data:
              name: Motion Control
              message: "Failsafe timer executed: all lights off."
