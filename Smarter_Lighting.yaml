blueprint: 
  name: "Motion-Controlled Lighting with Circadian Light – Failsafe Pro 6.18.9"
  description: >
    A complete automation for your smart home that combines motion control with advanced failsafe functions
    and dynamic circadian lighting. Main lights, day and night lights, as well as circadian lights are managed automatically –
    lights turn off after a set time, day and night scenes are restored, and circadian lighting adapts to the sun's elevation.
    Everything is logged for full traceability. Easy to configure, flexible, and safe for daily operation.
  
  domain: automation
  input:

    # --- Logging ---
    
    logging:
      name: Logging
      description: Logging and notification settings
      collapsed: true
      icon: mdi:note-text-outline
      input:
        use_persistent_notifications:
          name: Use notifications instead of logbook
          description: "If enabled, logs are sent as notifications instead of appearing in the logbook."
          default: false
          selector:
            boolean: {}

    # --- Sensors & Switches ---
    
    sensors_switches:
      name: Sensors & Switches
      description: Choose motion sensors and optional smart plugs/switches
      collapsed: true
      icon: mdi:motion-sensor
      input:
        motion_sensors:
          name: Motion Sensor(s)
          description: "One or more motion sensors to control the lighting."
          default: []
          selector:
            entity:
              domain: binary_sensor
              multiple: true

        optional_switches:
          name: Smart Plugs or Switches
          description: "Optional smart plugs or switches that can control the lights/devices."
          default: []
          selector:
            entity:
              domain: switch
              multiple: true

    # --- Auto-off times for Switches ---
    
        auto_off_switch_day:
          name: Auto-off Switches Day
          description: "How long after the last movement the switches should be on (daytime)."
          default: 0
          selector:
            number:
              min: 0
              max: 180
              unit_of_measurement: minuter
              mode: box

        auto_off_switch_night:
          name: Auto-off Switches Night
          description: "How long after the last movement the switches should be on (at night)"
          default: 0
          selector:
            number:
              min: 0
              max: 180
              unit_of_measurement: minuter
              mode: box
    
    # --- Main lights ---
    
    head_lighting:
      name: Main lights
      description: Settings for main lights
      collapsed: true
      icon: mdi:lightbulb-on-outline
      input:
        main_lights:
          name: Main Lights
          description: "Lights that always turn on when motion is detected (regardless of day/night)."
          default: []
          selector:
            target:
              entity:
                domain: light

        auto_off_main:
          name: Main Lights Duration (minutes)
          description: "How long main lights stay on after the last motion."
          default: []
          selector:
            number:
              min: 0
              max: 1200
              step: 1
              unit_of_measurement: min
              mode: box

        fade_out_duration_main:
          name: Fade out mainlights (seconds)
          description: How long it takes for the main lights to turn off (0 = immediately).
          default: 0
          selector:
            number:
              min: 0
              max: 300
              unit_of_measurement: sek
              mode: box
    
    # --- Day Lighting ---
    
    day_lighting:
      name: Day Lighting
      description: Settings for day lights and day scenes
      collapsed: true
      icon: mdi:weather-sunny
      input:    
        scene_day:
          name: Day Scene
          description: "Scene activated during daytime (if selected)."
          default: []
          selector:
            entity:
              domain: scene
              multiple: false

        off_scene_day:
          name: Off Scene Day
          description: "Scene to activate when day lights should turn off."
          default: []
          selector:
            entity:
              domain: scene
              multiple: false

        day_lights:
          name: Day Lights
          description: "Lights that only turn on during the day."
          default: []
          selector:
            target:
              entity:
                domain: light

        auto_off_day:
          name: Day Lights Duration (minutes)
          default: []
          selector:
            number:
              min: 0
              max: 1200
              step: 1
              unit_of_measurement: min
              mode: box

        brightness_day:
          name: Day Brightness
          description: "Optional brightness level for day lights (0–100%)."
          default: []
          selector:
            number:
              min: 0
              max: 100
              step: 1
              unit_of_measurement: "%"

        day_start:
          name: Day Start
          description: "Time when day mode activates."
          default: "07:00:00"
          selector:
            time: {}

        day_end:
          name: Day End
          description: "Time when day mode deactivates. Day End cannot be the same as Night Start."
          default: "21:59:59"
          selector:
            time: {}

        active_weekdays_day:
          name: Active Weekdays (Day)
          description: "Select which days day mode should be active."
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: Monday
                  value: mon
                - label: Tuesday
                  value: tue
                - label: Wednesday
                  value: wed
                - label: Thursday
                  value: thu
                - label: Friday
                  value: fri
                - label: Saturday
                  value: sat
                - label: Sunday
                  value: sun

        fade_out_duration_day_var:
          name: Fade out day lights (seconds)
          description: How long it takes for day lights running lights to turn off (0 = immediately).
          default: 0
          selector:
            number:
              min: 0
              max: 300
              unit_of_measurement: s
              mode: box
    
    # --- Night Lighting ---
    
    night_lighting:
      name: Night Lighting
      description: Settings for night lights and night scenes
      collapsed: true
      icon: mdi:weather-night
      input:
        scene_night:
          name: Night Scene
          description: "Scene activated during nighttime (if selected)."
          default: []
          selector:
            entity:
              domain: scene
              multiple: false

        off_scene_night:
          name: Off Scene Night
          description: "Scene to activate when night lights should turn off."
          default: []
          selector:
            entity:
              domain: scene
              multiple: false

        night_lights:
          name: Night Lights
          description: "Lights that only turn on during the night."
          default: []
          selector:
            target:
              entity:
                domain: light

        auto_off_night:
          name: Night Lights Duration (minutes)
          default: []
          selector:
            number:
              min: 0
              max: 1200
              step: 1
              unit_of_measurement: min
              mode: box

        brightness_night:
          name: Night Brightness
          default: []
          selector:
            number:
              min: 0
              max: 100
              step: 1
              unit_of_measurement: "%"

        night_start:
          name: Night Start
          default: "22:00:00"
          selector:
            time: {}

        night_end:
          name: Night End
          default: "06:59:59"
          selector:
            time: {}

        active_weekdays_night:
          name: Active Weekdays (Night)
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: Monday
                  value: mon
                - label: Tuesday
                  value: tue
                - label: Wednesday
                  value: wed
                - label: Thursday
                  value: thu
                - label: Friday
                  value: fri
                - label: Saturday
                  value: sat
                - label: Sunday
                  value: sun

        fade_out_duration_night_var:
          name: Fade out nightlights (seconds)
          description: How long it takes for night lights to turn off (0 = immediately).
          default: 0
          selector:
            number:
              min: 0
              max: 300
              unit_of_measurement: s
              mode: box
    
    # --- Scene restore ---
    
    snapshot_restore:
      name: Snapshot-restore
      description: Save and restore previous light state/scene when auto-off or failsafe is triggered.
      collapsed: true
      icon: mdi:camera-retake
      input:        
        enable_snapshot_restore:
          name: Activate snapshot-restore
          description: >
            When enabled, the last light state is saved and automatically restored
            when auto-off or failsafe is triggered.
            ⚠️ Only used if no off-scene is defined.
          default: false
          selector:
            boolean: {}
        
        input_text_last_scene:
          name: Input Text – Last Scene
          description: Input Text that stores the last scene which can be restored.
          default: []
          selector:
            entity:
              domain: input_text

    # --- Lux & Sun ---
    
    lux_sun:
      name: Lux & Sun
      description: Lux sensor and sun time settings
      collapsed: true
      icon: mdi:white-balance-sunny
      input:
        lux_sensor:
          name: Lux Sensor
          default: []
          selector:
            entity:
              domain: sensor
              device_class: illuminance

        lux_threshold:
          name: Lux Threshold
          default: []
          selector:
            number:
              min: 0
              max: 3000
              step: 1
              unit_of_measurement: lx

        use_sun_times:
          name: Use Sunrise/Sunset
          default: false
          selector:
            boolean: {}

        sunset_offset:
          name: Sunset Offset
          default: "00:00:00"
          selector:
            time: {}

        sunrise_offset:
          name: Sunrise Offset
          default: "00:00:00"
          selector:
            time: {}

    # --- Circadian Lights---
    
    circadian:
      name: Circadian Lights
      description: Circadian light settings
      collapsed: true
      icon: mdi:theme-light-dark
      input:
        circadian_enabled:
          name: Enable Circadian
          default: false
          selector:
            boolean: {}

        circadian_lights:
          name: Circadian Lights
          default: []
          selector:
            target:
              entity:
                domain: light

        update_interval:
          name: Circadian Update Interval (min)
          default: 15
          selector:
            number:
              min: 1
              max: 60
              step: 1
              unit_of_measurement: min

        circadian_min_temp:
          name: Minimum Color Temperature (K)
          default: 2700
          selector:
            number:
              min: 1500
              max: 6500
              step: 100
              unit_of_measurement: K

        circadian_max_temp:
          name: Maximum Color Temperature (K)
          default: 5000
          selector:
            number:
              min: 1500
              max: 6500
              step: 100
              unit_of_measurement: K

        auto_off_circadian:
          name: Circadian Lights Duration (minutes)
          default: []
          selector:
            number:
              min: 0
              max: 1200
              step: 1
              unit_of_measurement: min
              mode: box

    # --- Fixed On Times ---
    
    fixed_times:
      name: Fixed Times
      description: Automatic on and off for lights or smart outlets
      collapsed: true
      icon: mdi:clock-outline
      input:
        fixed_on_time_1:
          name: Fixed on time 1
          default: []
          selector:
            time: {}
            
        fixed_on_weekdays_1:
          name: Active Weekdays (Fixed On Time 1)
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: Monday
                  value: mon
                - label: Tuesday
                  value: tue
                - label: Wednesday
                  value: wed
                - label: Thursday
                  value: thu
                - label: Friday
                  value: fri
                - label: Saturday
                  value: sat
                - label: Sunday
                  value: sun
        
        fixed_on_time_2:
          name: Fixed on time 2
          default: []
          selector:
            time: {}
          
        fixed_on_weekdays_2:
          name: Active Weekdays (Fixed On Time 2)
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: Monday
                  value: mon
                - label: Tuesday
                  value: tue
                - label: Wednesday
                  value: wed
                - label: Thursday
                  value: thu
                - label: Friday
                  value: fri
                - label: Saturday
                  value: sat
                - label: Sunday
                  value: sun
    
    # --- Fixed Off Times ---
    
        fixed_off_time_1:
          name: Fixed Off Time 1
          default: []
          selector:
            time: {}

        fixed_off_weekdays_1:
          name: Active Off Weekdays (Fixed Time 1)
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: Monday
                  value: mon
                - label: Tuesday
                  value: tue
                - label: Wednesday
                  value: wed
                - label: Thursday
                  value: thu
                - label: Friday
                  value: fri
                - label: Saturday
                  value: sat
                - label: Sunday
                  value: sun

        fixed_off_time_2:
          name: Fixed Off Time 2
          default: []
          selector:
            time: {}

        fixed_off_weekdays_2:
          name: Active Weekdays (Fixed Time 2)
          default: []
          selector:
            select:
              multiple: true
              options:
                - label: Monday
                  value: mon
                - label: Tuesday
                  value: tue
                - label: Wednesday
                  value: wed
                - label: Thursday
                  value: thu
                - label: Friday
                  value: fri
                - label: Saturday
                  value: sat
                - label: Sunday
                  value: sun

    # --- Workday & Failsafe ---
    
    failsafe:
      name: Workday & Failsafe
      description: Workday sensor and failsafe timers
      collapsed: true
      icon: mdi:shield-alert-outline
      input:
        workday_sensor:
          name: Workday Sensor
          default: []
          selector:
            entity:
              domain: binary_sensor

        enable_failsafe:
          name: Enable Failsafe
          default: true
          selector:
            boolean: {}

        failsafe_timer_main:
          name: Failsafe Timer Main Lights (minutes)
          default: []
          selector:
            number:
              min: 1
              max: 240
              step: 1
              unit_of_measurement: min

        failsafe_timer_day:
          name: Failsafe Timer Day Lights (minutes)
          default: []
          selector:
            number:
              min: 1
              max: 120
              step: 1
              unit_of_measurement: min

        failsafe_timer_night:
          name: Failsafe Timer Night Lights (minutes)
          default: []
          selector:
            number:
              min: 1
              max: 120
              step: 1
              unit_of_measurement: min

        failsafe_timer_circadian:
          name: Failsafe Timer Circadian Lights (minutes)
          default: []
          selector:
            number:
              min: 1
              max: 120
              step: 1
              unit_of_measurement: min
              
# --- Triggers ---

trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: motion_on

  - platform: state
    entity_id: !input motion_sensors
    from: "off"
    to: "on"
    id: motion_on
    
  - platform: state
    entity_id: !input motion_sensors
    from: "on"
    to: "off"
    id: motion_off
    
  # --- Optional switches fix ---
  
  - platform: state
    entity_id: !input optional_switches
    to: "on"
    id: switch_on
    
  - platform: state
    entity_id: !input optional_switches
    to: "off"
    id: switch_off
    
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: sunrise_trigger
    enabled: !input use_sun_times

  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sunset_trigger
    enabled: !input use_sun_times
    
  - platform: time
    at: !input fixed_off_time_1
    id: fixed_off_1
    
  - platform: time
    at: !input fixed_off_time_2
    id: fixed_off_2

  - platform: time_pattern
    minutes: 15  # Time for update, default 15 min
    id: circadian_update
    enabled: !input circadian_enabled

mode: restart

# --- Variables ---

variables:

  # --- Auto-off & Timers ---
  
  auto_off_circadian_var: !input auto_off_circadian
  auto_off_day_var: !input auto_off_day
  auto_off_main_var: !input auto_off_main
  auto_off_night_var: !input auto_off_night
  auto_off_switch_day_var: !input auto_off_switch_day
  auto_off_switch_night_var: !input auto_off_switch_night
  circadian_enabled_var: !input circadian_enabled
  circadian_lights_var: !input circadian_lights
  circadian_max_temp_var: !input circadian_max_temp
  circadian_min_temp_var: !input circadian_min_temp
  day_end_var: !input day_end
  day_start_var: !input day_start
  fixed_off_weekdays_1_var: !input fixed_off_weekdays_1
  fixed_off_weekdays_2_var: !input fixed_off_weekdays_2
  fixed_on_time_1_var: !input fixed_on_time_1
  fixed_on_time_2_var: !input fixed_on_time_2
  night_end_var: !input night_end
  night_start_var: !input night_start
  workday_sensor_var: !input workday_sensor
  active_weekdays_day_var: !input active_weekdays_day
  active_weekdays_night_var: !input active_weekdays_night

  # --- Lights & Brightness ---
  
  brightness_day_var: !input brightness_day
  brightness_night_var: !input brightness_night
  day_lights_var: !input day_lights
  main_lights_var: !input main_lights
  night_lights_var: !input night_lights
  lux_sensor_var: !input lux_sensor
  lux_threshold_var: !input lux_threshold
  fade_out_duration_main_var: !input fade_out_duration_main
  fade_out_duration_day_var: !input fade_out_duration_day_var
  fade_out_duration_night_var: !input fade_out_duration_night_var

  # --- Scenes ---
  
  off_scene_day_var: !input off_scene_day
  off_scene_night_var: !input off_scene_night
  last_scene_entity: !input input_text_last_scene
  restore_last_scene_var: !input enable_snapshot_restore
  scene_day_var: !input scene_day
  scene_night_var: !input scene_night

  # --- Sensors & Triggers ---
  
  motion_sensors_var: !input motion_sensors
  use_sun_times_var: !input use_sun_times

  # --- Failsafe & Misc ---
  
  enable_failsafe_var: !input enable_failsafe
  failsafe_timer_circadian_var: !input failsafe_timer_circadian
  failsafe_timer_day_var: !input failsafe_timer_day
  failsafe_timer_main_var: !input failsafe_timer_main
  failsafe_timer_night_var: !input failsafe_timer_night
  use_persistent_notifications_var: !input use_persistent_notifications

# --- Actions ---

action:

  # --- Motion/Switch ON ---
  
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: template
            value_template: "{{ (optional_switches | default([])) != [] or trigger.id == 'motion_on' }}"
        sequence:

          # --- Snapshot ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set lights = [] %}
                      {% for var in [main_lights_var, day_lights_var, night_lights_var] %}
                        {% if var | default('') != '' %}
                          {% if var is string %}
                            {% set lights = lights + [var] %}
                          {% elif var is mapping and var.entity_id is string %}
                            {% set lights = lights + [var.entity_id] %}
                          {% elif var is iterable %}
                            {% set lights = lights + var %}
                          {% endif %}
                        {% endif %}
                      {% endfor %}
                      {{ lights | count > 0 }}
                sequence:
                  - service: scene.create
                    data:
                      scene_id: snapshot_before_on
                      snapshot_entities: >
                        {% set lights = [] %}
                        {% for var in [main_lights_var, day_lights_var, night_lights_var] %}
                          {% if var | default('') != '' %}
                            {% if var is string %}
                              {% set lights = lights + [var] %}
                            {% elif var is mapping and var.entity_id is string %}
                              {% set lights = lights + [var.entity_id] %}
                            {% elif var is iterable %}
                              {% set lights = lights + var %}
                            {% endif %}
                          {% endif %}
                        {% endfor %}
                        {{ lights | tojson }}

          # --- Day scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% if day_start_var is defined and day_end_var is defined %}
                        {% set t = now().time() %}
                        {% set start = strptime(day_start_var, '%H:%M:%S').time() %}
                        {% set end = strptime(day_end_var, '%H:%M:%S').time() %}
                        {{ ((start <= end and start <= t <= end) or (start > end and (t >= start or t <= end))) }}
                      {% else %}
                        false
                      {% endif %}
                sequence:
                    - choose:
                        - conditions:
                            - condition: template
                              value_template: >
                                {{ scene_day_var | default([]) != [] and
                                   (lux_sensor_var | default('') == '' or
                                    states(lux_sensor_var) | float < lux_threshold_var | float) }}
                          sequence:
                              - service: scene.turn_on
                                target:
                                  entity_id: "{{ scene_day_var }}"
                        - conditions:
                            - condition: template
                              value_template: >
                                {{ day_lights_var | default('') != '' and 
                                   (lux_sensor_var | default('') == '' or 
                                    states(lux_sensor_var) | float < lux_threshold_var | float) }}
                          sequence:
                              - service: light.turn_on
                                target:
                                  entity_id: >
                                    {% if day_lights_var is string %}
                                      {{ day_lights_var }}
                                    {% elif day_lights_var is mapping %}
                                      {{ day_lights_var.entity_id }}
                                    {% elif day_lights_var is iterable %}
                                      {{ day_lights_var | join(',') }}
                                    {% endif %}
                                data:
                                  brightness: >
                                    {% if brightness_day_var != '' %}
                                      {{ (brightness_day_var | int * 255 / 100) | int }}
                                    {% else %}
                                      255
                                    {% endif %}

          # --- Turn on switches daytime ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ optional_switches | default([]) != [] }}"
                sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: >
                          {% set switches = [] %}
                          {% if optional_switches is string %}
                            {% set switches = [optional_switches] %}
                          {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                            {% set switches = [optional_switches.entity_id] %}
                          {% elif optional_switches is iterable %}
                            {% for s in optional_switches %}
                              {% if s is string %}
                                {% set switches = switches + [s] %}
                              {% elif s.entity_id is string %}
                                {% set switches = switches + [s.entity_id] %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                          {{ switches | join(',') }}

          # --- Night scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% if night_start_var is defined and night_end_var is defined %}
                        {% set t = now().time() %}
                        {% set start = strptime(night_start_var, '%H:%M:%S').time() %}
                        {% set end = strptime(night_end_var, '%H:%M:%S').time() %}
                        {{ ((start <= end and start <= t <= end) or (start > end and (t >= start or t <= end))) }}
                      {% else %}
                        false
                      {% endif %}
                sequence:
                    - choose:
                        - conditions:
                            - condition: template
                              value_template: >
                                {{ scene_night_var | default([]) != [] and
                                   (lux_sensor_var | default('') == '' or
                                    states(lux_sensor_var) | float < lux_threshold_var | float) }}
                          sequence:
                              - service: scene.turn_on
                                target:
                                  entity_id: "{{ scene_night_var }}"
                        - conditions:
                            - condition: template
                              value_template: >
                                {{ night_lights_var | default('') != '' and 
                                   (lux_sensor_var | default('') == '' or 
                                    states(lux_sensor_var) | float < lux_threshold_var | float) }}
                          sequence:
                              - service: light.turn_on
                                target:
                                  entity_id: >
                                    {% if night_lights_var is string %}
                                      {{ night_lights_var }}
                                    {% elif night_lights_var is mapping %}
                                      {{ night_lights_var.entity_id }}
                                    {% elif night_lights_var is iterable %}
                                      {{ night_lights_var | join(',') }}
                                    {% endif %}
                                data:
                                  brightness: >
                                    {% if brightness_night_var != '' %}
                                      {{ (brightness_night_var | int * 255 / 100) | int }}
                                    {% else %}
                                      255
                                    {% endif %}

          # --- Turn on switches night time ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ optional_switches | default([]) != [] }}"
                sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: >
                          {% set switches = [] %}
                          {% if optional_switches is string %}
                            {% set switches = [optional_switches] %}
                          {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                            {% set switches = [optional_switches.entity_id] %}
                          {% elif optional_switches is iterable %}
                            {% for s in optional_switches %}
                              {% if s is string %}
                                {% set switches = switches + [s] %}
                              {% elif s.entity_id is string %}
                                {% set switches = switches + [s.entity_id] %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                          {{ switches | join(',') }}

          # --- Turn on switches at sunset ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ use_sun_times_var and (optional_switches | default([]) != [] or day_lights_var | default([]) != []) }}"
                  - condition: trigger
                    id: sunset_trigger
                sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: >
                          {% set switches = [] %}
                          {% if optional_switches is string %}
                            {% set switches = [optional_switches] %}
                          {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                            {% set switches = [optional_switches.entity_id] %}
                          {% elif optional_switches is iterable %}
                            {% for s in optional_switches %}
                              {% if s is string %}
                                {% set switches = switches + [s] %}
                              {% elif s.entity_id is string %}
                                {% set switches = switches + [s.entity_id] %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                          {{ switches | join(',') }}
                    - service: light.turn_on
                      target:
                        entity_id: >
                          {% set lights = [] %}
                          {% if day_lights_var is string %}
                            {% set lights = [day_lights_var] %}
                          {% elif day_lights_var is mapping %}
                            {% set lights = [day_lights_var.entity_id] %}
                          {% elif day_lights_var is iterable %}
                            {% for l in day_lights_var %}
                              {% if l is string %}
                                {% set lights = lights + [l] %}
                              {% elif l.entity_id is string %}
                                {% set lights = lights + [l.entity_id] %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                          {{ lights | join(',') }}
                      data:
                        brightness: >
                          {% if brightness_day_var != '' %}
                            {{ (brightness_day_var | int * 255 / 100) | int }}
                          {% else %}
                            255
                          {% endif %}

          # --- Turn off switches at sunrise ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ use_sun_times_var and (optional_switches | default([]) != [] or night_lights_var | default([]) != []) }}"
                  - condition: trigger
                    id: sunrise_trigger
                sequence:
                    - service: switch.turn_off
                      target:
                        entity_id: >
                          {% set switches = [] %}
                          {% if optional_switches is string %}
                            {% set switches = [optional_switches] %}
                          {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                            {% set switches = [optional_switches.entity_id] %}
                          {% elif optional_switches is iterable %}
                            {% for s in optional_switches %}
                              {% if s is string %}
                                {% set switches = switches + [s] %}
                              {% elif s.entity_id is string %}
                                {% set switches = switches + [s.entity_id] %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                          {{ switches | join(',') }}
                    - service: light.turn_off
                      target:
                        entity_id: >
                          {% set lights = [] %}
                          {% if night_lights_var is string %}
                            {% set lights = [night_lights_var] %}
                          {% elif night_lights_var is mapping %}
                            {% set lights = [night_lights_var.entity_id] %}
                          {% elif night_lights_var is iterable %}
                            {% for l in night_lights_var %}
                              {% if l is string %}
                                {% set lights = lights + [l] %}
                              {% elif l.entity_id is string %}
                                {% set lights = lights + [l.entity_id] %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                          {{ lights | join(',') }}
                      data:
                        brightness: >
                          {% if brightness_night_var != '' %}
                            {{ (brightness_night_var | int * 255 / 100) | int }}
                          {% else %}
                            255
                          {% endif %}


          # --- Save last scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ day_lights_var | default([]) | select('is_state','on') | list | count > 0 }}
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: input_text.last_scene_triggered
                    data:
                      value: "{{ scene_day_var }}"
              - conditions:
                  - condition: template
                    value_template: >
                      {{ night_lights_var | default([]) | select('is_state','on') | list | count > 0 }}
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: input_text.last_scene_triggered
                    data:
                      value: "{{ scene_night_var }}"

          # --- Logging ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ use_persistent_notifications_var }}"
                sequence:
                  - service: persistent_notification.create
                    data:
                      title: "Lighting Automation"
                      message: >
                        {% set t = now().time() %}
                        {% set day_start = strptime(day_start_var, '%H:%M:%S').time() %}
                        {% set day_end = strptime(day_end_var, '%H:%M:%S').time() %}
                        {% set night_start = strptime(night_start_var, '%H:%M:%S').time() %}
                        {% set night_end = strptime(night_end_var, '%H:%M:%S').time() %}
                        {% if use_sun_times_var %}
                          {% if is_state('sun.sun','above_horizon') %}
                            {% set mode = 'Day mode' %}
                          {% elif is_state('sun.sun','below_horizon') %}
                            {% set mode = 'Night mode' %}
                          {% else %}
                            {% set mode = 'Unknown mode' %}
                          {% endif %}
                        {% else %}
                          {% if day_start <= day_end %}
                            {% set is_daytime = (t >= day_start and t <= day_end) %}
                          {% else %}
                            {% set is_daytime = (t >= day_start or t <= day_end) %}
                          {% endif %}
                          {% if night_start <= night_end %}
                            {% set is_nighttime = (t >= night_start and t <= night_end) %}
                          {% else %}
                            {% set is_nighttime = (t >= night_start or t <= night_end) %}
                          {% endif %}
                          {% if is_daytime %}
                            {% set mode = 'Day mode' %}
                          {% elif is_nighttime %}
                            {% set mode = 'Night mode' %}
                          {% else %}
                            {% set mode = 'Unknown mode' %}
                          {% endif %}
                        {% endif %}
                        Lighting turned on via {{ 'motion' if trigger.id == 'motion_on' else 'switch' }} ({{ mode }}).
              - conditions: []
                sequence:
                  - service: logbook.log
                    data:
                      name: Lighting Automation
                      message: >
                        {% set t = now().time() %}
                        {% set day_start = strptime(day_start_var, '%H:%M:%S').time() %}
                        {% set day_end = strptime(day_end_var, '%H:%M:%S').time() %}
                        {% set night_start = strptime(night_start_var, '%H:%M:%S').time() %}
                        {% set night_end = strptime(night_end_var, '%H:%M:%S').time() %}
                        {% if use_sun_times_var %}
                          {% if is_state('sun.sun','above_horizon') %}
                            {% set mode = 'Day mode' %}
                          {% elif is_state('sun.sun','below_horizon') %}
                            {% set mode = 'Night mode' %}
                          {% else %}
                            {% set mode = 'Unknown mode' %}
                          {% endif %}
                        {% else %}
                          {% if day_start <= day_end %}
                            {% set is_daytime = (t >= day_start and t <= day_end) %}
                          {% else %}
                            {% set is_daytime = (t >= day_start or t <= day_end) %}
                          {% endif %}
                          {% if night_start <= night_end %}
                            {% set is_nighttime = (t >= night_start and t <= night_end) %}
                          {% else %}
                            {% set is_nighttime = (t >= night_start or t <= night_end) %}
                          {% endif %}
                          {% if is_daytime %}
                            {% set mode = 'Day mode' %}
                          {% elif is_nighttime %}
                            {% set mode = 'Night mode' %}
                          {% else %}
                            {% set mode = 'Unknown mode' %}
                          {% endif %}
                        {% endif %}
                        Lighting turned on via {{ 'motion' if trigger.id == 'motion_on' else 'switch' }} ({{ mode }}).

  # --- Auto-off Switchar ---

  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% set switches = [] %}
            {% if optional_switches is string and optional_switches != '' %}
              {% set switches = [optional_switches] %}
            {% elif optional_switches is mapping and optional_switches.entity_id is string %}
              {% set switches = [optional_switches.entity_id] %}
            {% elif optional_switches is iterable %}
              {% set switches = optional_switches | select('string') | list %}
            {% endif %}
            {{ switches | count > 0 }}
      sequence:
        - delay:
            minutes: >
              {% if is_state('sun.sun','above_horizon') %}
                {{ auto_off_switch_day_var | default(0) | float }}
              {% else %}
                {{ auto_off_switch_night_var | default(0) | float }}
              {% endif %}
        - service: switch.turn_off
          target:
            entity_id: >
              {% set switches = [] %}
              {% if optional_switches is string and optional_switches != '' %}
                {% set switches = [optional_switches] %}
              {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                {% set switches = [optional_switches.entity_id] %}
              {% elif optional_switches is iterable %}
                {% set switches = optional_switches | select('string') | list %}
              {% endif %}
              {{ switches | join(',') }}
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: >
                      {% set switches = [] %}
                      {% if optional_switches is string and optional_switches != '' %}
                        {% set switches = [optional_switches] %}
                      {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                        {% set switches = [optional_switches.entity_id] %}
                      {% elif optional_switches is iterable %}
                        {% set switches = optional_switches | select('string') | list %}
                      {% endif %}
                      Auto-off switches: {{ expand(switches) | map(attribute='name') | join(', ') | default('No switches') }} turned off.
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: >
                      {% set switches = [] %}
                      {% if optional_switches is string and optional_switches != '' %}
                        {% set switches = [optional_switches] %}
                      {% elif optional_switches is mapping and optional_switches.entity_id is string %}
                        {% set switches = [optional_switches.entity_id] %}
                      {% elif optional_switches is iterable %}
                        {% set switches = optional_switches | select('string') | list %}
                      {% endif %}
                      Auto-off switches: {{ expand(switches) | map(attribute='name') | join(', ') | default('No switches') }} turned off.      
                
  # --- Auto-off Main Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% set lights = [] %}
            {% if main_lights_var is string and main_lights_var != '' %}
              {% set lights = [main_lights_var] %}
            {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
              {% set lights = [main_lights_var.entity_id] %}
            {% elif main_lights_var is iterable %}
              {% set lights = main_lights_var | select('string') | list %}
            {% endif %}
            {{ lights | count > 0 }}
      sequence:
        - delay:
            minutes: "{{ auto_off_main_var | default(0) | float }}"
        - service: light.turn_off
          target:
            entity_id: >
              {% set lights = [] %}
              {% if main_lights_var is string and main_lights_var != '' %}
                {% set lights = [main_lights_var] %}
              {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                {% set lights = [main_lights_var.entity_id] %}
              {% elif main_lights_var is iterable %}
                {% set lights = main_lights_var | select('string') | list %}
              {% endif %}
              {{ lights | join(',') }}
          data:
            transition: >
              {{ [0, fade_out_duration_main_var | default(0) | int] | max }}
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: >
                      {% set lights = [] %}
                      {% if main_lights_var is string and main_lights_var != '' %}
                        {% set lights = [main_lights_var] %}
                      {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                        {% set lights = [main_lights_var.entity_id] %}
                      {% elif main_lights_var is iterable %}
                        {% set lights = main_lights_var | select('string') | list %}
                      {% endif %}
                      Auto-off Mainlights: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off.
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: >
                      {% set lights = [] %}
                      {% if main_lights_var is string and main_lights_var != '' %}
                        {% set lights = [main_lights_var] %}
                      {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                        {% set lights = [main_lights_var.entity_id] %}
                      {% elif main_lights_var is iterable %}
                        {% set lights = main_lights_var | select('string') | list %}
                      {% endif %}
                      Auto-off Mainlights: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off.

    # --- Auto-off Day Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% if use_sun_times_var %}
              {{ is_state('sun.sun','above_horizon') }}
            {% else %}
              {% set t = now().time() %}
              {% set day_start_time = strptime(day_start_var, '%H:%M:%S').time() %}
              {% set day_end_time   = strptime(day_end_var, '%H:%M:%S').time() %}
              {% if day_start_time <= day_end_time %}
                {{ t >= day_start_time and t <= day_end_time }}
              {% else %}
                {{ t >= day_start_time or t <= day_end_time }}
              {% endif %}
            {% endif %}
        - condition: template
          value_template: >
            {{ (day_lights_var is string and day_lights_var != '') 
                or (day_lights_var is mapping and day_lights_var.entity_id is string) 
                or (day_lights_var is iterable and (day_lights_var | select('string') | list | count > 0))
                or (off_scene_day_var is string and off_scene_day_var != '') }}
      sequence:
        - delay:
            minutes: "{{ auto_off_day_var | default(0) | float }}"
        - choose:
            
            # CASE 1: Lights turned off directly
            
            - conditions:
                - condition: template
                  value_template: >
                    {% set lights_on = [] %}
                    {% if day_lights_var is string and day_lights_var != '' %}
                      {% set lights_on = [day_lights_var] %}
                    {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                      {% set lights_on = [day_lights_var.entity_id] %}
                    {% elif day_lights_var is iterable %}
                      {% set lights_on = day_lights_var | select('string') | list %}
                    {% endif %}
                    {% set motion = expand(motion_sensors | default([])) | selectattr('state','eq','on') | list %}
                    {{ lights_on | select('is_state','on') | list | count > 0 and motion | count == 0 }}
              sequence:
                - service: light.turn_off
                  target:
                    entity_id: >
                      {% set lights_on = [] %}
                      {% if day_lights_var is string and day_lights_var != '' %}
                        {% set lights_on = [day_lights_var] %}
                      {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                        {% set lights_on = [day_lights_var.entity_id] %}
                      {% elif day_lights_var is iterable %}
                        {% set lights_on = day_lights_var | select('string') | list %}
                      {% endif %}
                      {{ lights_on | join(',') }}
                  data:
                    transition: >
                      {{ [0, fade_out_duration_day_var | default(0) | int] | max }}
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: >
                              {% set lights = [] %}
                              {% if day_lights_var is string and day_lights_var != '' %}
                                {% set lights = [day_lights_var] %}
                              {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                                {% set lights = [day_lights_var.entity_id] %}
                              {% elif day_lights_var is iterable %}
                                {% set lights = day_lights_var | select('string') | list %}
                              {% endif %}
                              Auto-off Day: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off.
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: >
                              {% set lights = [] %}
                              {% if day_lights_var is string and day_lights_var != '' %}
                                {% set lights = [day_lights_var] %}
                              {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                                {% set lights = [day_lights_var.entity_id] %}
                              {% elif day_lights_var is iterable %}
                                {% set lights = day_lights_var | select('string') | list %}
                              {% endif %}
                              Auto-off Day: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off.

            # CASE 2: Off-scene activates (only if setup and no motion)
            
            - conditions:
                - condition: template
                  value_template: >
                    {{ off_scene_day_var is string and off_scene_day_var != '' and
                       expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
              sequence:
                - service: scene.turn_on
                  target:
                    entity_id: "{{ off_scene_day_var }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: "Auto-off Day: Day lights turned off and off scene day activated."
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: "Auto-off Day: Day lights turned off and off scene day activated."

            # CASE 3: Snapshot-återställning (om aktiverad och ingen off-scene)
            
            - conditions:
                - condition: template
                  value_template: >
                    {{ off_scene_day_var == '' and enable_snapshot_restore_var and
                       expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
              sequence:
                - service: scene.turn_on
                  target:
                    entity_id: "{{ states(input_text_last_scene) }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: "Auto-off Day: Snapshot restored."
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: "Auto-off Day: Snapshot restored."

  # --- Auto-off Night Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% if use_sun_times_var %}
              {{ is_state('sun.sun','below_horizon') }}
            {% else %}
              {% set t = now().time() %}
              {% set night_start_time = strptime(night_start_var, '%H:%M:%S').time() %}
              {% set night_end_time   = strptime(night_end_var, '%H:%M:%S').time() %}
              {% if night_start_time <= night_end_time %}
                {{ t >= night_start_time and t <= night_end_time }}
              {% else %}
                {{ t >= night_start_time or t <= night_end_time }}
              {% endif %}
            {% endif %}
        - condition: template
          value_template: >
            {{ (night_lights_var is string and night_lights_var != '') 
                or (night_lights_var is mapping and night_lights_var.entity_id is string) 
                or (night_lights_var is iterable and (night_lights_var | select('string') | list | count > 0))
                or (off_scene_night_var is string and off_scene_night_var != '') }}
      sequence:
        - delay:
            minutes: "{{ auto_off_night_var | default(0) | float }}"
        - choose:
            
            # CASE 1: Lights turned off directly
            
            - conditions:
                - condition: template
                  value_template: >
                    {% set lights_on = [] %}
                    {% if night_lights_var is string and night_lights_var != '' %}
                      {% set lights_on = [night_lights_var] %}
                    {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                      {% set lights_on = [night_lights_var.entity_id] %}
                    {% elif night_lights_var is iterable %}
                      {% set lights_on = night_lights_var | select('string') | list %}
                    {% endif %}
                    {% set motion = expand(motion_sensors | default([])) | selectattr('state','eq','on') | list %}
                    {{ lights_on | select('is_state','on') | list | count > 0 and motion | count == 0 }}
              sequence:
                - service: light.turn_off
                  target:
                    entity_id: >
                      {% set lights_on = [] %}
                      {% if night_lights_var is string and night_lights_var != '' %}
                        {% set lights_on = [night_lights_var] %}
                      {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                        {% set lights_on = [night_lights_var.entity_id] %}
                      {% elif night_lights_var is iterable %}
                        {% set lights_on = night_lights_var | select('string') | list %}
                      {% endif %}
                      {{ lights_on | join(',') }}
                  data:
                    transition: >
                      {{ [0, fade_out_duration_night_var | default(0) | int] | max }}
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: >
                              {% set lights = [] %}
                              {% if night_lights_var is string and night_lights_var != '' %}
                                {% set lights = [night_lights_var] %}
                              {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                                {% set lights = [night_lights_var.entity_id] %}
                              {% elif night_lights_var is iterable %}
                                {% set lights = night_lights_var | select('string') | list %}
                              {% endif %}
                              Auto-off Night: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off.
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: >
                              {% set lights = [] %}
                              {% if night_lights_var is string and night_lights_var != '' %}
                                {% set lights = [night_lights_var] %}
                              {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                                {% set lights = [night_lights_var.entity_id] %}
                              {% elif night_lights_var is iterable %}
                                {% set lights = night_lights_var | select('string') | list %}
                              {% endif %}
                              Auto-off Night: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off.

            # CASE 2: Off-scene activates (only if setup and no motion)
            
            - conditions:
                - condition: template
                  value_template: >
                    {{ off_scene_night_var is string and off_scene_night_var != '' and
                       expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
              sequence:
                - service: scene.turn_on
                  target:
                    entity_id: "{{ off_scene_night_var }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: "Auto-off Night: Off scene night activated."
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: "Auto-off Night: Off scene night activated."

            # CASE 3: Snapshot-restore (only if setup and no motion)
            
            - conditions:
                - condition: template
                  value_template: >
                    {{ off_scene_night_var == '' and enable_snapshot_restore_var and
                       expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
              sequence:
                - service: scene.turn_on
                  target:
                    entity_id: "{{ states(input_text_last_scene) }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: "Auto-off Night: Snapshot restored."
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: "Auto-off Night: Snapshot restored."

  # --- Auto-off Circadian Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% set lights = [] %}
            {% if circadian_lights_var is string and circadian_lights_var != '' %}
              {% set lights = [circadian_lights_var] %}
            {% elif circadian_lights_var is mapping and circadian_lights_var.entity_id is string %}
              {% set lights = [circadian_lights_var.entity_id] %}
            {% elif circadian_lights_var is iterable %}
              {% set lights = circadian_lights_var | select('string') | list %}
            {% endif %}
            {{ lights | count > 0 }}
      sequence:
        - delay:
            minutes: "{{ auto_off_circadian_var | default(0) | float }}"
        - service: light.turn_off
          target:
            entity_id: >
              {% set lights = [] %}
              {% if circadian_lights_var is string and circadian_lights_var != '' %}
                {% set lights = [circadian_lights_var] %}
              {% elif circadian_lights_var is mapping and circadian_lights_var.entity_id is string %}
                {% set lights = [circadian_lights_var.entity_id] %}
              {% elif circadian_lights_var is iterable %}
                {% set lights = circadian_lights_var | select('string') | list %}
              {% endif %}
              {{ lights | join(',') }}
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Auto-off Circadian: Circadian lights turned off automatically."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Auto-off Circadian: Circadian lights turned off automatically."

  # --- Fixed Off Times with Weekday ---
  
  - choose:
    - conditions:
        - condition: trigger
          id: fixed_off_1
        - condition: template
          value_template: "{{ now().strftime('%a').lower() in fixed_off_weekdays_1_var }}"
      sequence:
        - service: light.turn_off
          target:
            entity_id: >
              {% set entities = [] %}
              {% for var in [main_lights_var, day_lights_var, night_lights_var] %}
                {% if var | default('') != '' %}
                  {% if var is string %}
                    {% set entities = entities + [var] %}
                  {% elif var is mapping %}
                    {% set entities = entities + [var.entity_id] %}
                  {% elif var is iterable %}
                    {% set entities = entities + (var | select('string') | list) %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if optional_switches_var | default([]) != [] %}
                {% if optional_switches_var is string %}
                  {% set entities = entities + [optional_switches_var] %}
                {% elif optional_switches_var is mapping %}
                  {% set entities = entities + [optional_switches_var.entity_id] %}
                {% elif optional_switches_var is iterable %}
                  {% set entities = entities + (optional_switches_var | select('string') | list) %}
                {% endif %}
              {% endif %}
              {{ entities | join(',') }}

  - choose:
    - conditions:
        - condition: trigger
          id: fixed_off_2
        - condition: template
          value_template: "{{ now().strftime('%a').lower() in fixed_off_weekdays_2_var }}"
      sequence:
        - service: light.turn_off
          target:
            entity_id: >
              {% set entities = [] %}
              {% for var in [main_lights_var, day_lights_var, night_lights_var] %}
                {% if var | default('') != '' %}
                  {% if var is string %}
                    {% set entities = entities + [var] %}
                  {% elif var is mapping %}
                    {% set entities = entities + [var.entity_id] %}
                  {% elif var is iterable %}
                    {% set entities = entities + (var | select('string') | list) %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if optional_switches_var | default([]) != [] %}
                {% if optional_switches_var is string %}
                  {% set entities = entities + [optional_switches_var] %}
                {% elif optional_switches_var is mapping %}
                  {% set entities = entities + [optional_switches_var.entity_id] %}
                {% elif optional_switches_var is iterable %}
                  {% set entities = entities + (optional_switches_var | select('string') | list) %}
                {% endif %}
              {% endif %}
              {{ entities | join(',') }}
  
  # --- Circadian Light ---
  
  - choose:
    - conditions:
        - condition: trigger
          id: motion_on
        - condition: template
          value_template: >
            {% set circadian_enabled_var = circadian_enabled_var | default(false) %}
            {% set circadian_lights_var = circadian_lights_var | default([]) %}
            {{ circadian_enabled_var and circadian_lights_var != [] }}
      sequence:
        - service: light.turn_on
          target:
            entity_id: >
              {% if circadian_lights_var is string %}
                {{ circadian_lights_var }}
              {% elif circadian_lights_var is mapping %}
                {{ circadian_lights_var.entity_id }}
              {% elif circadian_lights_var is iterable %}
                {{ circadian_lights_var | join(',') }}
              {% endif %}
          data:
            color_temp_kelvin: "{{ circadian_temp_var | default(2700) }}"
            brightness: "{{ circadian_brightness_var | default(255) }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {% set use_persistent_notifications_var = use_persistent_notifications_var | default(false) %}
                    {{ use_persistent_notifications_var }}
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Circadian Light: Adjusted automatically."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Circadian Light: Adjusted automatically."

  # --- Circadian Light update (via time_pattern) ---
  
  - choose:
    - conditions:
        - condition: trigger
          id: circadian_update
        - condition: template
          value_template: >
            {% set circadian_enabled_var = circadian_enabled_var | default(false) %}
            {% set circadian_lights_var = circadian_lights_var | default([]) %}
            {{ circadian_enabled_var and circadian_lights_var != [] }}
      sequence:
        - service: light.turn_on
          target:
            entity_id: >
              {% if circadian_lights_var is string %}
                {{ circadian_lights_var }}
              {% elif circadian_lights_var is mapping %}
                {{ circadian_lights_var.entity_id }}
              {% elif circadian_lights_var is iterable %}
                {{ circadian_lights_var | join(',') }}
              {% endif %}
          data:
            color_temp_kelvin: "{{ circadian_temp_var | default(2700) }}"
            brightness: "{{ circadian_brightness_var | default(255) }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {% set use_persistent_notifications_var = use_persistent_notifications_var | default(false) %}
                    {{ use_persistent_notifications_var }}
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Circadian Update: Adjusted automatically via time pattern."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Circadian Update: Adjusted automatically via time pattern."

  # --- Failsafe Main Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var and main_lights_var | default('') != '' }}"
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if main_lights_var is string %}
                {% set lights = [main_lights_var] %}
              {% elif main_lights_var is mapping %}
                {% set lights = [main_lights_var.entity_id] %}
              {% elif main_lights_var is iterable %}
                {% set lights = main_lights_var %}
              {% endif %}
              {{ lights | select('is_state','on') | list | count > 0 }}
          - condition: template
            value_template: >
              {{ expand(motion_sensors | default([])) 
                  | selectattr('state','eq','on') 
                  | list | count == 0 }}
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_main_var | default(0) | float }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set lights = [] %}
                      {% if main_lights_var is string %}
                        {% set lights = [main_lights_var] %}
                      {% elif main_lights_var is mapping %}
                        {% set lights = [main_lights_var.entity_id] %}
                      {% elif main_lights_var is iterable %}
                        {% set lights = main_lights_var %}
                      {% endif %}
                      {{ lights | select('is_state','on') | list | count > 0 }}
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: >
                        {% if main_lights_var is string %}
                          {{ main_lights_var }}
                        {% elif main_lights_var is mapping %}
                          {{ main_lights_var.entity_id }}
                        {% elif main_lights_var is iterable %}
                          {{ main_lights_var | join(',') }}
                        {% endif %}
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ use_persistent_notifications_var }}"
                        sequence:
                          - service: persistent_notification.create
                            data:
                              title: "Lighting Automation"
                              message: >
                                {% set lights = [] %}
                                {% if main_lights_var is string and main_lights_var != '' %}
                                  {% set lights = [main_lights_var] %}
                                {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                                  {% set lights = [main_lights_var.entity_id] %}
                                {% elif main_lights_var is iterable %}
                                  {% set lights = main_lights_var | select('string') | list %}
                                {% endif %}
                                Failsafe Mainlights: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off automatically.
                      - conditions: []
                        sequence:
                          - service: logbook.log
                            data:
                              name: Lighting Automation
                              message: >
                                {% set lights = [] %}
                                {% if main_lights_var is string and main_lights_var != '' %}
                                  {% set lights = [main_lights_var] %}
                                {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                                  {% set lights = [main_lights_var.entity_id] %}
                                {% elif main_lights_var is iterable %}
                                  {% set lights = main_lights_var | select('string') | list %}
                                {% endif %}
                                Failsafe Mainlights: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off automatically.

  # --- Failsafe Day lights ---
  
  - choose:

    # CASE 1: At least one day light is on
    
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var }}"
        - condition: template
          value_template: >
            {% set lights = [] %}
            {% if day_lights_var is string %}
              {% set lights = [day_lights_var] %}
            {% elif day_lights_var is mapping %}
              {% set lights = [day_lights_var.entity_id] %}
            {% elif day_lights_var is iterable %}
              {% set lights = day_lights_var %}
            {% endif %}
            {{ lights | select('is_state','on') | list | count > 0 }}
        - condition: template
          value_template: >
            {% set t = now().time() %}
            {% set start = strptime(day_start_var, '%H:%M:%S').time() %}
            {% set end   = strptime(day_end_var, '%H:%M:%S').time() %}
            {{ t >= start and t <= end }}
        - condition: template
          value_template: >
            {{ expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - delay:
            minutes: "{{ failsafe_timer_day_var | default(0) | float }}"
        - service: light.turn_off
          target:
            entity_id: >
              {% if day_lights_var is string %}
                {{ day_lights_var }}
              {% elif day_lights_var is mapping %}
                {{ day_lights_var.entity_id }}
              {% elif day_lights_var is iterable %}
                {{ day_lights_var | join(',') }}
              {% endif %}
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: >
                      {% set lights = [] %}
                      {% if day_lights_var is string and day_lights_var != '' %}
                        {% set lights = [day_lights_var] %}
                      {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                        {% set lights = [day_lights_var.entity_id] %}
                      {% elif day_lights_var is iterable %}
                        {% set lights = day_lights_var | select('string') | list %}
                      {% endif %}
                      Failsafe Day: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off automatically.
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: >
                      {% set lights = [] %}
                      {% if day_lights_var is string and day_lights_var != '' %}
                        {% set lights = [day_lights_var] %}
                      {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                        {% set lights = [day_lights_var.entity_id] %}
                      {% elif day_lights_var is iterable %}
                        {% set lights = day_lights_var | select('string') | list %}
                      {% endif %}
                      Failsafe Day: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off automatically.

    # CASE 2: Off-scene activates (only if setup and no motion)
    
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var and off_scene_day_var is string and off_scene_day_var != '' }}"
        - condition: template
          value_template: >
            {{ expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - delay:
            minutes: "{{ failsafe_timer_day_var | default(0) | float }}"
        - service: scene.turn_on
          target:
            entity_id: "{{ off_scene_day_var }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Failsafe Day: Off scene day activated."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Failsafe Day: Off scene day activated."

    # CASE 3: Snapshot-restore (if enabled and no off-scene)
    
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var and off_scene_day_var == '' and enable_snapshot_restore_var }}"
        - condition: template
          value_template: >
            {{ expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - service: scene.turn_on
          target:
            entity_id: "{{ states(input_text_last_scene) }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Failsafe Day: Snapshot restored."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Failsafe Day: Snapshot restored."

  # --- Failsafe Night lights ---
  
  - choose:

    # CASE 1: At least one day light is on
    
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var }}"
        - condition: template
          value_template: >
            {% set lights = [] %}
            {% if night_lights_var is string %}
              {% set lights = [night_lights_var] %}
            {% elif night_lights_var is mapping %}
              {% set lights = [night_lights_var.entity_id] %}
            {% elif night_lights_var is iterable %}
              {% set lights = night_lights_var %}
            {% endif %}
            {{ lights | select('is_state','on') | list | count > 0 }}
        - condition: template
          value_template: >
            {% set t = now().time() %}
            {% set start = strptime(night_start_var, '%H:%M:%S').time() %}
            {% set end   = strptime(night_end_var, '%H:%M:%S').time() %}
            {% if start <= end %}
              {{ t >= start and t <= end }}
            {% else %}
              {{ t >= start or t <= end }}
            {% endif %}
        - condition: template
          value_template: >
            {{ expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - delay:
            minutes: "{{ failsafe_timer_night_var | default(0) | float }}"
        - service: light.turn_off
          target:
            entity_id: >
              {% if night_lights_var is string %}
                {{ night_lights_var }}
              {% elif night_lights_var is mapping %}
                {{ night_lights_var.entity_id }}
              {% elif night_lights_var is iterable %}
                {{ night_lights_var | join(',') }}
              {% endif %}
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: >
                      {% set lights = [] %}
                      {% if night_lights_var is string and night_lights_var != '' %}
                        {% set lights = [night_lights_var] %}
                      {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                        {% set lights = [night_lights_var.entity_id] %}
                      {% elif night_lights_var is iterable %}
                        {% set lights = night_lights_var | select('string') | list %}
                      {% endif %}
                      Failsafe Night: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off automatically.
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: >
                      {% set lights = [] %}
                      {% if night_lights_var is string and night_lights_var != '' %}
                        {% set lights = [night_lights_var] %}
                      {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                        {% set lights = [night_lights_var.entity_id] %}
                      {% elif night_lights_var is iterable %}
                        {% set lights = night_lights_var | select('string') | list %}
                      {% endif %}
                      Failsafe Night: {{ expand(lights) | map(attribute='name') | join(', ') | default('No lights') }} turned off automatically.

    # CASE 2: Aktivate off-scene
    
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var and off_scene_night_var is string and off_scene_night_var != '' }}"
        - condition: template
          value_template: >
            {{ expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - delay:
            minutes: "{{ failsafe_timer_night_var | default(0) | float }}"
        - service: scene.turn_on
          target:
            entity_id: "{{ off_scene_night_var }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Failsafe Night: Off-scene activated."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Failsafe Night: Off-scene activated."

    # CASE 3: Snapshot-restore (if enabled and no off-scene)
    
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var and off_scene_night_var == '' and enable_snapshot_restore_var }}"
        - condition: template
          value_template: >
            {{ expand(motion_sensors | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - service: scene.turn_on
          target:
            entity_id: "{{ states(input_text_last_scene) }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: "Failsafe Night: Snapshot restored."
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: "Failsafe Night: Snapshot restored."

  # --- Failsafe Circadian Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: "{{ enable_failsafe_var and circadian_lights_var | default('') != '' }}"
        - condition: template
          value_template: >
            {% set lights = [] %}
            {% if circadian_lights_var is string %}
              {% set lights = [circadian_lights_var] %}
            {% elif circadian_lights_var is mapping %}
              {% set lights = [circadian_lights_var.entity_id] %}
            {% elif circadian_lights_var is iterable %}
              {% set lights = circadian_lights_var %}
            {% endif %}
            {{ lights | select('is_state','on') | list | count > 0 }}
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {% set lights = [] %}
                    {% if circadian_lights_var is string %}
                      {% set lights = [circadian_lights_var] %}
                    {% elif circadian_lights_var is mapping %}
                      {% set lights = [circadian_lights_var.entity_id] %}
                    {% elif circadian_lights_var is iterable %}
                      {% set lights = circadian_lights_var %}
                    {% endif %}
                    {{ lights | select('is_state','on') | list | count > 0 }}
              sequence:
                - delay:
                    minutes: "{{ failsafe_timer_circadian_var | default(0) | float }}"
                - service: light.turn_off
                  target:
                    entity_id: >
                      {% if circadian_lights_var is string %}
                        {{ circadian_lights_var }}
                      {% elif circadian_lights_var is mapping %}
                        {{ circadian_lights_var.entity_id }}
                      {% elif circadian_lights_var is iterable %}
                        {{ circadian_lights_var | join(',') }}
                      {% endif %}
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ use_persistent_notifications_var }}"
                      sequence:
                        - service: persistent_notification.create
                          data:
                            title: "Lighting Automation"
                            message: "Failsafe Circadian Lights: Circadian lights turned off automatically."
                    - conditions: []
                      sequence:
                        - service: logbook.log
                          data:
                            name: Lighting Automation
                            message: "Failsafe Circadian Lights: Circadian lights turned off automatically."

  # --- Restore last scene (standalone) ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: "{{ restore_last_scene_var }}"
        - condition: template
          value_template: "{{ states(last_scene_entity) | default('') != '' }}"
        - condition: template
          value_template: >
            {{ expand(motion_sensors_var | default([])) | selectattr('state','eq','on') | list | count == 0 }}
      sequence:
        - service: scene.turn_on
          target:
            entity_id: "{{ states(last_scene_entity) }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ use_persistent_notifications_var }}"
              sequence:
                - service: persistent_notification.create
                  data:
                    title: "Lighting Automation"
                    message: “Last scene restored.”
            - conditions: []
              sequence:
                - service: logbook.log
                  data:
                    name: Lighting Automation
                    message: “Last scene restored.”