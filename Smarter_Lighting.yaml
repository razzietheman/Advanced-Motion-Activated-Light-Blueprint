blueprint: 
  name: "Motion-Controlled Lighting with Circadian Light – Failsafe Pro 6.14"
  description: >
    A complete automation for your smart home that combines motion control with advanced failsafe functions
    and dynamic circadian lighting. Main lights, day and night lights, as well as circadian lights are managed automatically –
    lights turn off after a set time, day and night scenes are restored, and circadian lighting adapts to the sun's elevation.
    Everything is logged for full traceability. Easy to configure, flexible, and safe for daily operation.
  domain: automation
  input:

    # --- Sensors & Switches ---
  
    motion_sensors:
      name: Motion Sensor(s)
      description: "One or more motion sensors that will control the lighting."
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true

    optional_switches:
      name: Smart Plugs or Switches
      description: "Optional smart plugs or switches that can control the lights/devices."
      default: []
      selector:
        entity:
          domain: switch
          multiple: true

    # --- Lights & Scenes ---
    
    main_lights:
      name: Main Lights
      description: "Lights that should always turn on when motion is detected (regardless of day/night)."
      default: []
      selector:
        target:
          entity:
            domain: light

    auto_off_main:
      name: Main Lights Duration (minutes)
      description: "How long the main lights should stay on after the last motion."
      default: []
      selector:
        number:
          min: 0
          max: 1200
          step: 1
          unit_of_measurement: min
          mode: box

    scene_day:
      name: Day Scene
      description: "Scene activated during daytime (if selected)."
      default: []
      selector:
        entity:
          domain: scene
          multiple: false

    off_scene_day:
      name: Off Scene Day
      description: "Scene to activate when Day lights should turn off."
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
    
    day_lights:
      name: Daytime Lights
      description: "Lights that should only turn on during the day."
      default: []
      selector:
        target:
          entity:
            domain: light

    auto_off_day:
      name: Day Lights Duration (minutes)
      description: "How long the day lights should stay on after the last motion."
      default: []
      selector:
        number:
          min: 0
          max: 1200
          step: 1
          unit_of_measurement: min
          mode: box
    
    brightness_day:
      name: Day Brightness
      description: "Brightness level (0-100%) for day lights. Leave empty to skip."
      default: []
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"
          
    day_start:
      name: Day Start
      description: "Time when the day mode activates."
      default: "07:00:00"
      selector:
        time: {}

    day_end:
      name: Day End
      description: "Time when the day mode deactivates. Day End cannot be the same as Night Start. Example: 21:59:59"
      default: "21:59:59"
      selector:
        time: {}

    active_weekdays_day:
      name: Active Weekdays (Day)
      description: "Select which days the day mode should be active."
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
    
    scene_night:
      name: Night Scene
      description: "Scene activated during nighttime (if selected)."
      default: []
      selector:
        entity:
          domain: scene
          multiple: false

    off_scene_night:
      name: Off Scene Night
      description: "Scene to activate when Night lights should turn off."
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
    
    night_lights:
      name: Night Lights
      description: "Lights that should only turn on during the night."
      default: []
      selector:
        target:
          entity:
            domain: light

    auto_off_night:
      name: Night Lights Duration (minutes)
      description: "How long the night lights should stay on after the last motion."
      default: []
      selector:
        number:
          min: 0
          max: 1200
          step: 1
          unit_of_measurement: min
          mode: box
    
    brightness_night:
      name: Night Brightness
      description: "Brightness level (0-100%) for night lights. Leave empty to skip."
      default: []
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"

    night_start:
      name: Night Start
      description: "Time when night mode activates. Night Start cannot be the same as Day End. Example: 22:00:00"
      default: "22:00:00"
      selector:
        time: {}

    night_end:
      name: Night End
      description: "Time when night mode deactivates."
      default: "06:59:59"
      selector:
        time: {}

    active_weekdays_night:
      name: Active Weekdays (Night)
      description: "Select which days the night mode should be active."
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    # --- Lux & Sun ---
    
    lux_sensor:
      name: Lux Sensor
      description: "Sensor that measures brightness (lux)."
      default: []
      selector:
        entity:
          domain: sensor
          device_class: illuminance

    lux_threshold:
      name: Lux Threshold
      description: "Lights only turn on if the lux value is below this threshold."
      default: []
      selector:
        number:
          min: 0
          max: 3000
          step: 1
          unit_of_measurement: lx

    use_sun_times:
      name: Use Sunrise/Sunset
      description: "Whether the automation should use sun times instead of fixed times."
      default: false
      selector:
        boolean: {}

    sunset_offset:
      name: Sunset Offset
      description: "Adjustment for sunset time, earlier or later."
      default: "00:00:00"
      selector:
        time: {}

    sunrise_offset:
      name: Sunrise Offset
      description: "Adjustment for sunrise time, earlier or later."
      default: "00:00:00"
      selector:
        time: {}
    
    # --- Circadian light ---
    
    circadian_enabled:
      name: Enable Circadian
      description: "Whether the lights should follow a circadian light profile."
      default: false
      selector:
        boolean: {}

    circadian_lights:
      name: Circadian Lights
      description: "Lights that should follow the circadian light profile."
      default: []
      selector:
        target:
          entity:
            domain: light

    update_interval:
      name: Circadian Update Interval (min)
      description: "How often circadian lights are updated."
      default: 15
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: min
    
    circadian_min_temp:
      name: Minimum Color Temperature (K)
      description: "Color temperature in the morning/night (warm light)."
      default: 2700
      selector:
        number:
          min: 1500
          max: 6500
          step: 100
          unit_of_measurement: K

    circadian_max_temp:
      name: Maximum Color Temperature (K)
      description: "Color temperature in the middle of the day (cold light)."
      default: 5000
      selector:
        number:
          min: 1500
          max: 6500
          step: 100
          unit_of_measurement: K
    
    auto_off_circadian:
      name: Circadian Lights Duration (minutes)
      description: "How long the circadian lights should stay on after the last motion or trigger."
      default: []
      selector:
        number:
          min: 0
          max: 1200
          step: 1
          unit_of_measurement: min
          mode: box

    # --- Fixed Off Times ---
    
    fixed_off_time_1:
      name: Fixed Off Time 1 (optional)
      description: "Time when lights or smart plugs automatically turn off."
      default: []
      selector:
        time: {}

    fixed_off_weekdays_1:
      name: Active Weekdays (Fixed Time 1)
      description: "Which weekdays fixed off time 1 should apply to."
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    fixed_off_time_2:
      name: Fixed Off Time 2 (optional)
      description: "Time when lights or smart plugs automatically turn off."
      default: []
      selector:
        time: {}

    fixed_off_weekdays_2:
      name: Active Weekdays (Fixed Time 2)
      description: "Which weekdays fixed off time 2 should apply to."
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    # --- Workday & Failsafe ---
    
    workday_sensor:
      name: Workday Sensor
      description: "Sensor that indicates workdays."
      default: []
      selector:
        entity:
          domain: binary_sensor

    enable_failsafe:
      name: Enable Failsafe
      description: "Activates the failsafe feature that automatically turns off lights if auto-off did not trigger correctly."
      default: true
      selector:
        boolean: {}

    failsafe_timer_main:
      name: Failsafe Timer Main Lights (minutes)
      description: "Number of minutes before main lights automatically turn off if auto-off did not trigger as expected."
      default: []
      selector:
        number:
          min: 1
          max: 240
          step: 1
          unit_of_measurement: min

    failsafe_timer_day:
      name: Failsafe Timer Day Lights (minutes)
      description: "Number of minutes before day lights automatically turn off if auto-off did not trigger as expected."
      default: []
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min

    failsafe_timer_night:
      name: Failsafe Timer Night Lights (minutes)
      description: "Number of minutes before night lights automatically turn off if auto-off did not trigger as expected."
      default: []
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min

    failsafe_timer_circadian:
      name: Failsafe Timer Circadian Lights (minutes)
      description: "Number of minutes before circadian lights automatically turn off if auto-off has not been triggered."
      default: []
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
    
    input_text_last_scene:
      name: Input Text - Last Scene
      description: "Input Text entity that stores the name of the last active scene."
      default: []
      selector:
        entity:
          domain: input_text

# --- Triggers ---

trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: motion_on

  - platform: state
    entity_id: !input motion_sensors
    from: "off"
    to: "on"
    id: motion_on
    
  - platform: state
    entity_id: !input motion_sensors
    from: "on"
    to: "off"
    id: motion_off
    
  # --- Optional switches fix ---
  
  - platform: state
    entity_id: !input optional_switches
    to: "on"
    id: switch_on
    
  - platform: state
    entity_id: !input optional_switches
    to: "off"
    id: switch_off
    
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: sunrise_trigger
    enabled: !input use_sun_times

  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sunset_trigger
    enabled: !input use_sun_times
    
  - platform: time
    at: !input fixed_off_time_1
    id: fixed_off_1
    
  - platform: time
    at: !input fixed_off_time_2
    id: fixed_off_2

  - platform: time_pattern
    minutes: 15  # Time for update, default 15 min
    id: circadian_update
    enabled: "{{ circadian_enabled_var }}"

mode: restart

# --- Variables ---

variables:
  main_lights_var: !input main_lights
  day_lights_var: !input day_lights
  brightness_day_var: !input brightness_day
  night_lights_var: !input night_lights
  brightness_night_var: !input brightness_night
  scene_day_var: !input scene_day
  off_scene_day_var: !input off_scene_day
  scene_night_var: !input scene_night
  off_scene_night_var: !input off_scene_night
  last_scene_entity: !input input_text_last_scene
  lux_sensor_var: !input lux_sensor
  lux_threshold_var: !input lux_threshold
  use_sun_times_var: !input use_sun_times
  workday_sensor_var: !input workday_sensor
  auto_off_main_var: !input auto_off_main
  auto_off_day_var: !input auto_off_day
  auto_off_night_var: !input auto_off_night
  auto_off_circadian_var: !input auto_off_circadian
  fixed_off_weekdays_1_var: !input fixed_off_weekdays_1
  fixed_off_weekdays_2_var: !input fixed_off_weekdays_2
  day_start_var: !input day_start
  day_end_var: !input day_end
  night_start_var: !input night_start
  night_end_var: !input night_end
  active_weekdays_day_var: !input active_weekdays_day
  active_weekdays_night_var: !input active_weekdays_night
  enable_failsafe_var: !input enable_failsafe
  failsafe_timer_main_var: !input failsafe_timer_main
  failsafe_timer_day_var: !input failsafe_timer_day
  failsafe_timer_night_var: !input failsafe_timer_night
  circadian_enabled_var: !input circadian_enabled
  circadian_lights_var: !input circadian_lights
  circadian_min_temp_var: !input circadian_min_temp
  circadian_max_temp_var: !input circadian_max_temp
  failsafe_timer_circadian_var: !input failsafe_timer_circadian

# --- Actions ---

action:

  # --- Motion / Switch ON ---
  
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: template
            value_template: "{{ (optional_switches | default([])) != [] or trigger.id == 'motion_on' }}"
        sequence:

          # --- Snapshot ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set lights = [] %}
                      {% for var in [main_lights_var, day_lights_var, night_lights_var] %}
                        {% if var is string and var != '' %}
                          {% set lights = lights + [var] %}
                        {% elif var is mapping and var.entity_id is string %}
                          {% set lights = lights + [var.entity_id] %}
                        {% elif var is iterable %}
                          {% set lights = lights + var %}
                        {% endif %}
                      {% endfor %}
                      {{ lights | count > 0 }}
                sequence:
                  - service: scene.create
                    data:
                      scene_id: snapshot_before_on
                      snapshot_entities: >
                        {% set lights = [] %}
                        {% for var in [main_lights_var, day_lights_var, night_lights_var] %}
                          {% if var is string and var != '' %}
                            {% set lights = lights + [var] %}
                          {% elif var is mapping and var.entity_id is string %}
                            {% set lights = lights + [var.entity_id] %}
                          {% elif var is iterable %}
                            {% set lights = lights + var %}
                          {% endif %}
                        {% endfor %}
                        {{ lights | tojson }}

          # --- Day Scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set t = now().time() %}
                      {% set start = strptime(day_start_var, '%H:%M:%S').time() %}
                      {% set end = strptime(day_end_var, '%H:%M:%S').time() %}
                      {% if start <= end %}
                        {% set by_time = t >= start and t <= end %}
                      {% else %}
                        {% set by_time = t >= start or t <= end %}
                      {% endif %}
                      {{ is_state('sun.sun','above_horizon') or by_time }}
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_day_var | default([]) != [] }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: "{{ scene_day_var }}"
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ day_lights_var | default('') != '' and 
                                 (lux_sensor_var | default('') == '' or 
                                 states(lux_sensor_var) | float < lux_threshold_var | float) }}
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: >
                                {% if day_lights_var is string %}
                                  {{ day_lights_var }}
                                {% elif day_lights_var is mapping %}
                                  {{ day_lights_var.entity_id }}
                                {% elif day_lights_var is iterable %}
                                  {{ day_lights_var | join(',') }}
                                {% endif %}
                            data:
                              brightness: >
                                {% if brightness_day_var != '' %}
                                  {{ (brightness_day_var | int * 255 / 100) | int }}
                                {% else %}
                                  255
                                {% endif %}
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ main_lights_var | default('') != '' and 
                                 (lux_sensor_var | default('') == '' or 
                                 states(lux_sensor_var) | float < lux_threshold_var | float) }}
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: >
                                {% if main_lights_var is string %}
                                  {{ main_lights_var }}
                                {% elif main_lights_var is mapping %}
                                  {{ main_lights_var.entity_id }}
                                {% elif main_lights_var is iterable %}
                                  {{ main_lights_var | join(',') }}
                                {% endif %}

          # --- Night Scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set t = now().time() %}
                      {% set start = strptime(night_start_var, '%H:%M:%S').time() %}
                      {% set end = strptime(night_end_var, '%H:%M:%S').time() %}
                      {% if start <= end %}
                        {% set by_time = t >= start and t <= end %}
                      {% else %}
                        {% set by_time = t >= start or t <= end %}
                      {% endif %}
                      {{ is_state('sun.sun','below_horizon') or by_time }}
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ scene_night_var | default([]) != [] }}"
                        sequence:
                          - service: scene.turn_on
                            target:
                              entity_id: "{{ scene_night_var }}"
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ night_lights_var | default('') != '' and 
                                 (lux_sensor_var | default('') == '' or 
                                 states(lux_sensor_var) | float < lux_threshold_var | float) }}
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: >
                                {% if night_lights_var is string %}
                                  {{ night_lights_var }}
                                {% elif night_lights_var is mapping %}
                                  {{ night_lights_var.entity_id }}
                                {% elif night_lights_var is iterable %}
                                  {{ night_lights_var | join(',') }}
                                {% endif %}
                            data:
                              brightness: >
                                {% if brightness_night_var != '' %}
                                  {{ (brightness_night_var | int * 255 / 100) | int }}
                                {% else %}
                                  255
                                {% endif %}
                      - conditions:
                          - condition: template
                            value_template: >
                              {{ main_lights_var | default('') != '' and 
                                 (lux_sensor_var | default('') == '' or 
                                 states(lux_sensor_var) | float < lux_threshold_var | float) }}
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: >
                                {% if main_lights_var is string %}
                                  {{ main_lights_var }}
                                {% elif main_lights_var is mapping %}
                                  {{ main_lights_var.entity_id }}
                                {% elif main_lights_var is iterable %}
                                  {{ main_lights_var | join(',') }}
                                {% endif %}

          # --- Save Last Scene ---
          
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity | default('') != '' }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: "{{ last_scene_entity }}"
                      value: "Day/Night ON"

          # --- Logging ---
          
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Day/Night activated via motion or switch."

  # --- Auto-off Main Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if main_lights_var is string and main_lights_var != '' %}
                {% set lights = [main_lights_var] %}
              {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                {% set lights = [main_lights_var.entity_id] %}
              {% elif main_lights_var is iterable %}
                {% set lights = main_lights_var | select('string') | list %}
              {% endif %}
              {{ lights | count > 0 }}
        sequence:
          - delay:
              minutes: "{{ auto_off_main_var | default(0) | float }}"
          - service: light.turn_off
            target:
              entity_id: >
                {% set lights = [] %}
                {% if main_lights_var is string and main_lights_var != '' %}
                  {% set lights = [main_lights_var] %}
                {% elif main_lights_var is mapping and main_lights_var.entity_id is string %}
                  {% set lights = [main_lights_var.entity_id] %}
                {% elif main_lights_var is iterable %}
                  {% set lights = main_lights_var | select('string') | list %}
                {% endif %}
                {{ lights | join(',') }}
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Auto-off Main: Main lights turned off."

  # --- Auto-off Day Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% if use_sun_times_var %}
              {{ is_state('sun.sun','above_horizon') }}
            {% else %}
              {% set t = now().time() %}
              {% set start = strptime(day_start_var, '%H:%M:%S').time() %}
              {% set end = strptime(day_end_var, '%H:%M:%S').time() %}
              {% if start <= end %}
                {{ t >= start and t <= end }}
              {% else %}
                {{ t >= start or t <= end }}
              {% endif %}
            {% endif %}
        - condition: template
          value_template: >
            {{ (day_lights_var is string and day_lights_var != '') 
                or (day_lights_var is mapping and day_lights_var.entity_id is string) 
                or (day_lights_var is iterable and (day_lights_var | select('string') | list | count > 0))
                or (off_scene_day_var is string and off_scene_day_var != '') }}
      sequence:
        - delay:
            minutes: "{{ auto_off_day_var | default(0) | float }}"
        - choose:
            
            # If off_scene_day_var is set, run it
            
            - conditions:
                - condition: template
                  value_template: "{{ off_scene_day_var is string and off_scene_day_var != '' }}"
              sequence:
                - service: scene.turn_on
                  target:
                    entity_id: "{{ off_scene_day_var }}"
            
            # Otherwise, turn off the lights directly
            
            - conditions: []
              sequence:
                - service: light.turn_off
                  target:
                    entity_id: >
                      {% set lights = [] %}
                      {% if day_lights_var is string and day_lights_var != '' %}
                        {% set lights = [day_lights_var] %}
                      {% elif day_lights_var is mapping and day_lights_var.entity_id is string %}
                        {% set lights = [day_lights_var.entity_id] %}
                      {% elif day_lights_var is iterable %}
                        {% set lights = day_lights_var | select('string') | list %}
                      {% endif %}
                      {{ lights | join(',') }}
        - service: scene.turn_on
          target:
            entity_id: scene.snapshot_before_on
        - service: logbook.log
          data:
            name: Lighting Automation
            message: "Auto-off Day: Day lights turned off and snapshot restored."

  # --- Auto-off Night Lights ---
  
  - choose:
    - conditions:
        - condition: template
          value_template: >
            {% if use_sun_times_var %}
              {{ is_state('sun.sun','below_horizon') }}
            {% else %}
              {% set t = now().time() %}
              {% set start = strptime(night_start_var, '%H:%M:%S').time() %}
              {% set end = strptime(night_end_var, '%H:%M:%S').time() %}
              {% if start <= end %}
                {{ t >= start and t <= end }}
              {% else %}
                {{ t >= start or t <= end }}
              {% endif %}
            {% endif %}
        - condition: template
          value_template: >
            {{ (night_lights_var is string and night_lights_var != '') 
                or (night_lights_var is mapping and night_lights_var.entity_id is string) 
                or (night_lights_var is iterable and (night_lights_var | select('string') | list | count > 0))
                or (off_scene_night_var is string and off_scene_night_var != '') }}
      sequence:
        - delay:
            minutes: "{{ auto_off_night_var | default(0) | float }}"
        - choose:
            
            # If off_scene_night_var is set, run it
            
            - conditions:
                - condition: template
                  value_template: "{{ off_scene_night_var is string and off_scene_night_var != '' }}"
              sequence:
                - service: scene.turn_on
                  target:
                    entity_id: "{{ off_scene_night_var }}"
            
            # Otherwise, turn off the lights directly
            
            - conditions: []
              sequence:
                - service: light.turn_off
                  target:
                    entity_id: >
                      {% set lights = [] %}
                      {% if night_lights_var is string and night_lights_var != '' %}
                        {% set lights = [night_lights_var] %}
                      {% elif night_lights_var is mapping and night_lights_var.entity_id is string %}
                        {% set lights = [night_lights_var.entity_id] %}
                      {% elif night_lights_var is iterable %}
                        {% set lights = night_lights_var | select('string') | list %}
                      {% endif %}
                      {{ lights | join(',') }}
        - service: scene.turn_on
          target:
            entity_id: scene.snapshot_before_on
        - service: logbook.log
          data:
            name: Lighting Automation
            message: "Auto-off Night: Night lights turned off and snapshot restored."

  # --- Auto-off Circadian Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if circadian_lights_var is string and circadian_lights_var != '' %}
                {% set lights = [circadian_lights_var] %}
              {% elif circadian_lights_var is mapping and circadian_lights_var.entity_id is string %}
                {% set lights = [circadian_lights_var.entity_id] %}
              {% elif circadian_lights_var is iterable %}
                {% set lights = circadian_lights_var | select('string') | list %}
              {% endif %}
              {{ lights | count > 0 }}
        sequence:
          - delay:
              minutes: "{{ auto_off_circadian_var | default(0) | float }}"
          - service: light.turn_off
            target:
              entity_id: >
                {% set lights = [] %}
                {% if circadian_lights_var is string and circadian_lights_var != '' %}
                  {% set lights = [circadian_lights_var] %}
                {% elif circadian_lights_var is mapping and circadian_lights_var.entity_id is string %}
                  {% set lights = [circadian_lights_var.entity_id] %}
                {% elif circadian_lights_var is iterable %}
                  {% set lights = circadian_lights_var | select('string') | list %}
                {% endif %}
                {{ lights | join(',') }}
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Auto-off Circadian: Circadian lights turned off automatically."

  # --- Fixed Off Times with Weekday ---
  
  - choose:
    - conditions:
        - condition: trigger
          id: fixed_off_1
        - condition: template
          value_template: "{{ now().strftime('%a').lower() in fixed_off_weekdays_1_var }}"
      sequence:
        - service: light.turn_off
          target:
            entity_id: >
              {% set entities = [] %}
              {% for var in [main_lights_var, day_lights_var, night_lights_var, optional_switches_var] %}
                {% if var | default('') != '' %}
                  {% if var is string %}
                    {% set entities = entities + [var] %}
                  {% elif var is mapping %}
                    {% set entities = entities + [var.entity_id] %}
                  {% elif var is iterable %}
                    {% set entities = entities + var %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {{ entities | join(',') }}

  - choose:
    - conditions:
        - condition: trigger
          id: fixed_off_2
        - condition: template
          value_template: "{{ now().strftime('%a').lower() in fixed_off_weekdays_2_var }}"
      sequence:
        - service: light.turn_off
          target:
            entity_id: >
              {% set entities = [] %}
              {% for var in [main_lights_var, day_lights_var, night_lights_var, optional_switches_var] %}
                {% if var | default('') != '' %}
                  {% if var is string %}
                    {% set entities = entities + [var] %}
                  {% elif var is mapping %}
                    {% set entities = entities + [var.entity_id] %}
                  {% elif var is iterable %}
                    {% set entities = entities + var %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {{ entities | join(',') }}

  # --- Circadian Light ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ circadian_enabled_var and circadian_lights_var | default([]) != [] }}"
          - condition: trigger
            id: motion_on
        sequence:
          - service: light.turn_on
            target:
              entity_id: >
                {% if circadian_lights_var is string %}
                  {{ circadian_lights_var }}
                {% elif circadian_lights_var is mapping %}
                  {{ circadian_lights_var.entity_id }}
                {% elif circadian_lights_var is iterable %}
                  {{ circadian_lights_var | join(',') }}
                {% endif %}
            data:
              color_temp: "{{ circadian_temp_var }}"
              brightness: "{{ circadian_brightness_var }}"
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Circadian Light: Adjusted automatically."

  # --- Circadian Light update (via time_pattern) ---
  
  - choose:
      - conditions:
          - condition: trigger
            id: circadian_update
          - condition: template
            value_template: "{{ circadian_enabled_var and circadian_lights_var | default([]) != [] }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id: >
                {% if circadian_lights_var is string %}
                  {{ circadian_lights_var }}
                {% elif circadian_lights_var is mapping %}
                  {{ circadian_lights_var.entity_id }}
                {% elif circadian_lights_var is iterable %}
                  {{ circadian_lights_var | join(',') }}
                {% endif %}
            data:
              color_temp: "{{ circadian_temp_var }}"
              brightness: "{{ circadian_brightness_var }}"
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Circadian Update: Adjusted automatically via time pattern."

  # --- Failsafe Main Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var and main_lights_var | default('') != '' }}"
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if main_lights_var is string %}
                {% set lights = [main_lights_var] %}
              {% elif main_lights_var is mapping %}
                {% set lights = [main_lights_var.entity_id] %}
              {% elif main_lights_var is iterable %}
                {% set lights = main_lights_var %}
              {% endif %}
              {{ lights | select('is_state','on') | list | count > 0 }}
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_main_var | default(0) | float }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set lights = [] %}
                      {% if main_lights_var is string %}
                        {% set lights = [main_lights_var] %}
                      {% elif main_lights_var is mapping %}
                        {% set lights = [main_lights_var.entity_id] %}
                      {% elif main_lights_var is iterable %}
                        {% set lights = main_lights_var %}
                      {% endif %}
                      {{ lights | select('is_state','on') | list | count > 0 }}
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: >
                        {% if main_lights_var is string %}
                          {{ main_lights_var }}
                        {% elif main_lights_var is mapping %}
                          {{ main_lights_var.entity_id }}
                        {% elif main_lights_var is iterable %}
                          {{ main_lights_var | join(',') }}
                        {% endif %}
                  - service: logbook.log
                    data:
                      name: Lighting Automation
                      message: "Failsafe Main: Main lights turned off automatically (only if still on)."

  # --- Failsafe Day Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var }}"
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if day_lights_var is string %}
                {% set lights = [day_lights_var] %}
              {% elif day_lights_var is mapping %}
                {% set lights = [day_lights_var.entity_id] %}
              {% elif day_lights_var is iterable %}
                {% set lights = day_lights_var %}
              {% endif %}
              {{ lights | select('is_state','on') | list | count > 0 }}
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_day_var | default(0) | float }}"
          - service: light.turn_off
            target:
              entity_id: >
                {% if day_lights_var is string %}
                  {{ day_lights_var }}
                {% elif day_lights_var is mapping %}
                  {{ day_lights_var.entity_id }}
                {% elif day_lights_var is iterable %}
                  {{ day_lights_var | join(',') }}
                {% endif %}
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Failsafe Day: Day lights turned off automatically (only if still on)."

      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var and scene_day_var | default('') != '' }}"
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_day_var | default(0) | float }}"
          - service: scene.turn_on
            target:
              entity_id: scene.snapshot_before_on
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Failsafe Day: Day scene restored."

  # --- Failsafe Night Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var }}"
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if night_lights_var is string %}
                {% set lights = [night_lights_var] %}
              {% elif night_lights_var is mapping %}
                {% set lights = [night_lights_var.entity_id] %}
              {% elif night_lights_var is iterable %}
                {% set lights = night_lights_var %}
              {% endif %}
              {{ lights | select('is_state','on') | list | count > 0 }}
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_night_var | default(0) | float }}"
          - service: light.turn_off
            target:
              entity_id: >
                {% if night_lights_var is string %}
                  {{ night_lights_var }}
                {% elif night_lights_var is mapping %}
                  {{ night_lights_var.entity_id }}
                {% elif night_lights_var is iterable %}
                  {{ night_lights_var | join(',') }}
                {% endif %}
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Failsafe Night: Night lights turned off automatically (only if still on)."

      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var and scene_night_var | default('') != '' }}"
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_night_var | default(0) | float }}"
          - service: scene.turn_on
            target:
              entity_id: scene.snapshot_before_on
          - service: logbook.log
            data:
              name: Lighting Automation
              message: "Failsafe Night: Night scene restored."

  # --- Failsafe Circadian Lights ---
  
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe_var and circadian_lights_var | default('') != '' }}"
          - condition: template
            value_template: >
              {% set lights = [] %}
              {% if circadian_lights_var is string %}
                {% set lights = [circadian_lights_var] %}
              {% elif circadian_lights_var is mapping %}
                {% set lights = [circadian_lights_var.entity_id] %}
              {% elif circadian_lights_var is iterable %}
                {% set lights = circadian_lights_var %}
              {% endif %}
              {{ lights | select('is_state','on') | list | count > 0 }}
        sequence:
          - delay:
              minutes: "{{ failsafe_timer_circadian_var | default(0) | float }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {% set lights = [] %}
                      {% if circadian_lights_var is string %}
                        {% set lights = [circadian_lights_var] %}
                      {% elif circadian_lights_var is mapping %}
                        {% set lights = [circadian_lights_var.entity_id] %}
                      {% elif circadian_lights_var is iterable %}
                        {% set lights = circadian_lights_var %}
                      {% endif %}
                      {{ lights | select('is_state','on') | list | count > 0 }}
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: >
                        {% if circadian_lights_var is string %}
                          {{ circadian_lights_var }}
                        {% elif circadian_lights_var is mapping %}
                          {{ circadian_lights_var.entity_id }}
                        {% elif circadian_lights_var is iterable %}
                          {{ circadian_lights_var | join(',') }}
                        {% endif %}
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Failsafe Circadian Lights: Circadian lights turned off automatically."
