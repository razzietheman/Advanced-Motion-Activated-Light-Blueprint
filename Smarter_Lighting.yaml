blueprint:
  name: Motion-activated lighting (Scene or Direct Lights) with schedules, night mode, and failsafe
  description: >
    Control any lights using a motion sensor, with separate day and night schedules, customizable weekdays,
    dynamic failsafe timer, and optional scenes or direct light selection. Fully language-independent.
    Includes snapshot restore for previous light state.
  domain: automation
  input:
    binary_sensor_motion:
      name: Motion Sensor
      description: Sensor that detects motion
      selector:
        entity:
          domain: binary_sensor
    light_entity:
      name: Main Light Entity
      description: Main light entity used for state checks (can be any light in the group)
      selector:
        entity:
          domain: light
    lux_sensor:
      name: Lux Sensor
      description: Sensor that measures ambient light level (lux)
      selector:
        entity:
          domain: sensor
    lux_threshold:
      name: Lux threshold
      description: Maximum lux value for light activation
      default: 95
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: lx
          mode: slider
    input_text_last_scene:
      name: Input Text â€“ Last Scene
      description: Keeps track of last activated scene/mode
      selector:
        entity:
          domain: input_text

    # --- DAY SETTINGS ---
    scene_day:
      name: Day Scene (optional)
      description: Scene to activate during the day (leave empty if using direct lights)
      default: []
      selector:
        entity:
          domain: scene
    day_lights:
      name: Day Lights (optional)
      description: Lights to turn on during daytime (used if scene is not set)
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    active_weekdays_day:
      name: Active Days (Daylight)
      selector:
        select:
          multiple: true
          options: [mon, tue, wed, thu, fri, sat, sun]
    active_start_time_day:
      name: Start Time (Daylight)
      selector:
        time:
    active_end_time_day:
      name: End Time (Daylight)
      selector:
        time:

    # --- NIGHT SETTINGS ---
    scene_night:
      name: Night Scene (optional)
      description: Scene to activate during night (leave empty if using direct lights)
      default: []
      selector:
        entity:
          domain: scene
    night_lights:
      name: Night Lights (optional)
      description: Lights to turn on during night (used if scene is not set)
      default: []
      selector:
        entity:
          domain: light
          multiple: true
    active_weekdays_night:
      name: Active Days (Nightlight)
      selector:
        select:
          multiple: true
          options: [mon, tue, wed, thu, fri, sat, sun]
    active_start_time_night:
      name: Start Time (Nightlight)
      selector:
        time:
    active_end_time_night:
      name: End Time (Nightlight)
      selector:
        time:

    failsafe_timer:
      name: Failsafe Timer (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
          mode: slider

trigger:
  - platform: state
    entity_id: !input binary_sensor_motion
    to: "on"
    id: motion_on
  - platform: state
    entity_id: !input binary_sensor_motion
    from: "on"
    to: "off"
    id: motion_off
  - platform: state
    entity_id: !input light_entity
    to: "on"
    id: light_on

mode: parallel
max: 100

action:
  - choose:
      # --- DAY MODE ---
      - conditions:
          - condition: trigger
            id: motion_on
          - condition: numeric_state
            entity_id: !input lux_sensor
            below: !input lux_threshold
          - condition: time
            after: !input active_start_time_day
            before: !input active_end_time_day
            weekday: !input active_weekdays_day
        sequence:
          - service: scene.create
            data:
              scene_id: before_motion
              snapshot_entities: !input light_entity
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (day_lights | length) > 0 }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input day_lights
              - default:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_day
          - service: input_text.set_value
            data:
              entity_id: !input input_text_last_scene
              value: bright_light

      # --- NIGHT MODE ---
      - conditions:
          - condition: trigger
            id: motion_on
          - condition: time
            after: !input active_start_time_night
            before: !input active_end_time_night
            weekday: !input active_weekdays_night
        sequence:
          - service: scene.create
            data:
              scene_id: before_motion
              snapshot_entities: !input light_entity
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (night_lights | length) > 0 }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input night_lights
              - default:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_night
          - service: input_text.set_value
            data:
              entity_id: !input input_text_last_scene
              value: night_light

      # --- TURN OFF ---
      - conditions:
          - condition: trigger
            id: motion_off
          - condition: state
            entity_id: !input light_entity
            state: "on"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input input_text_last_scene
                    state: bright_light
                sequence:
                  - delay: "00:02:00"
                  - condition: state
                    entity_id: !input binary_sensor_motion
                    state: "off"
                  - service: scene.turn_on
                    target:
                      entity_id: scene.before_motion
              - conditions:
                  - condition: state
                    entity_id: !input input_text_last_scene
                    state: night_light
                sequence:
                  - delay: "00:01:00"
                  - condition: state
                    entity_id: !input binary_sensor_motion
                    state: "off"
                  - service: scene.turn_on
                    target:
                      entity_id: scene.before_motion

  # --- FAILSAFE ---
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: light_on
          - condition: state
            entity_id: !input light_entity
            state: "on"
        sequence:
          - delay:
              minutes: !input failsafe_timer
          - condition: state
            entity_id: !input light_entity
            state: "on"
          - condition: state
            entity_id: !input binary_sensor_motion
            state: "off"
          - service: light.turn_off
            target:
              entity_id: !input light_entity
          - service: logbook.log
            data:
              name: Light
              message: "Failsafe: Light was automatically turned off after timeout."
