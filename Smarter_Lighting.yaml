blueprint:
  name: Motion-Controlled Lighting 3.7 – Fully Optional with Two Fixed Off-Times, Weekdays, Sun, Workday, and Failsafe
  description: >
    Control optional lighting with one or more motion sensors, time, sunrise/sunset,
    lux threshold, workday control, snapshot restoration, and failsafe timer.
    Includes two optional fixed off-times with separate weekdays.
  domain: automation
  input:
    motion_sensors:
      name: Motion Sensor(s) (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: true
          
    optional_switches:
      name: Optional manual switch
      default: []
      selector:
        entity:
          domain: switch
          multiple: true
          
    light_entity:
      name: Lights (optional)
      default: []
      selector:
        target:
          entity:
            domain: light
    scene_day:
      name: Daytime Scene (optional)
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
    scene_night:
      name: Nighttime Scene (optional)
      default: []
      selector:
        entity:
          domain: scene
          multiple: false
    day_lights:
      name: Day Lights (optional)
      default: []
      selector:
        target:
          entity:
            domain: light
    night_lights:
      name: Night Lights (optional)
      default: []
      selector:
        target:
          entity:
            domain: light
    lux_sensor:
      name: Lux Sensor (optional)
      default: []
      selector:
        entity:
          domain: sensor
          device_class: illuminance
          multiple: false
          
    lux_threshold:
      name: Lux Threshold
      default: 50
      selector:
        number:
          min: 0
          max: 1000
          step: 1
          unit_of_measurement: lx
          
    use_sun_times:
      name: Use Sunrise/Sunset
      default: false
      selector:
        boolean: {}
    sunset_offset:
      name: Sunset Offset
      default: "00:00:00"
      selector:
        text: {}
    sunrise_offset:
      name: Sunrise offset
      default: "00:00:00"
      selector:
        text: {}
    sun_trigger_text:
      name: Input Text for Sun Trigger (optional)
      default: []
      selector:
        entity:
          domain: input_text
          
    fixed_off_time_1:
      name: Fixed Off-Time 1 (optional)
      default: []
      selector:
        time: {}
    fixed_off_weekdays_1:
      name: Active Weekdays (Fixed Off-Time 1)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
    fixed_off_time_2:
      name: Fixed Off-Time 2 (optional)
      default: []
      selector:
        time: {}
    fixed_off_weekdays_2:
      name: Active Weekdays (Fixed Off-Time 2)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
          
    day_start:
      name: Day Start (optional)
      default: "07:00:00"
      selector:
        time: {}
    day_end:
      name: Day End (optional)
      default: "22:00:00"
      selector:
        time: {}
    night_start:
      name: Night Start (optional)
      default: "22:00:00"
      selector:
        time: {}
    night_end:
      name: Night End (optional)
      default: "07:00:00"
      selector:
        time: {}
    active_weekdays_day:
      name: Active Weekdays (Day, optional)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
    active_weekdays_night:
      name: Active Weekdays (Night, optional)
      default: []
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
    workday_sensor:
      name: Workday Sensor (optional)
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: false
          
    enable_failsafe:
      name: Enable Failsafe
      default: true
      selector:
        boolean: {}
    failsafe_timer_day:
      name: Failsafe Timer Day (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min
    failsafe_timer_night:
      name: Failsafe Timer Night (minutes)
      default: 15
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: min

    input_text_last_scene:
      name: Input Text – Last Scene (optional)
      default: []
      selector:
        entity:
          domain: input_text
    on_time_day:
      name: On-Time Day (minutes)
      default: 2
      selector:
        number:
          min: 0.5
          max: 120
          step: 0.5
          unit_of_measurement: minutes
          mode: box
    on_time_night:
      name: On-Time Night (minutes)
      default: 1
      selector:
        number:
          min: 0.5
          max: 120
          step: 0.5
          unit_of_measurement: minutes
          mode: box

# --- TRIGGERS ---
trigger:
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: motion_on
  - platform: state
    entity_id: !input motion_sensors
    to: "off"
    id: motion_off
  - platform: state
    entity_id: !input light_entity
    to: "on"
    id: light_on
  - platform: state
    entity_id: !input optional_switches
    to: "on"
    id: switch_on
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sun_set
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: sun_rise
  - platform: time
    at: !input fixed_off_time_1
    id: fixed_off_1
  - platform: time
    at: !input fixed_off_time_2
    id: fixed_off_2

mode: parallel
max: 100

# --- VARIABLES ---
variables:
  light_entity_list: !input light_entity
  day_lights: !input day_lights
  night_lights: !input night_lights
  scene_day: !input scene_day
  scene_night: !input scene_night
  last_scene_entity: !input input_text_last_scene
  lux_sensor: !input lux_sensor
  lux_threshold: !input lux_threshold
  use_sun_times: !input use_sun_times
  sunset_offset: !input sunset_offset
  sunrise_offset: !input sunrise_offset
  sun_trigger_text: !input sun_trigger_text
  workday_sensor: !input workday_sensor
  enable_failsafe: !input enable_failsafe
  failsafe_timer_day: !input failsafe_timer_day
  failsafe_timer_night: !input failsafe_timer_night
  fixed_off_time_1: !input fixed_off_time_1
  fixed_off_weekdays_1: !input fixed_off_weekdays_1
  fixed_off_time_2: !input fixed_off_time_2
  fixed_off_weekdays_2: !input fixed_off_weekdays_2

condition: []

action:
  # --- MOTION OR SWITCH TRIGGER ---
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: template
            value_template: >
              {% set ls = lux_sensor %}
              {% if ls == [] %} true
              {% else %} (states(ls) | float(9999)) < lux_threshold
              {% endif %}
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ not use_sun_times }}"
                  - condition: time
                    after: !input day_start
                    before: !input day_end
                    weekday: !input active_weekdays_day
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ use_sun_times }}"
                  - condition: sun
                    after: sunrise
          - condition: template
            value_template: >
              {% set w = workday_sensor %}
              {% if w == [] %}
                true
              {% else %}
                is_state(w, 'on')
              {% endif %}
        sequence:
          # --- Day Mode ---
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: scene.create
                    data:
                      scene_id: before_day_scene
                      snapshot_entities: !input light_entity
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ scene_day != [] }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_day
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input day_lights
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input light_entity
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input input_text_last_scene
                      value: "day"
          - service: logbook.log
            data:
              name: Motion Control
              message: "Day mode activated via motion/manual."
  
  # --- NIGHT MODE ---
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: switch_on
          - condition: template
            value_template: >
              {% set ls = lux_sensor %}
              {% if ls == [] %} true
              {% else %} (states(ls) | float(0)) < lux_threshold
              {% endif %}
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ not use_sun_times }}"
                  - condition: time
                    after: !input night_start
                    before: !input night_end
                    weekday: !input active_weekdays_night
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ use_sun_times }}"
                  - condition: sun
                    after: sunset
          - condition: template
            value_template: >
              {% set w = workday_sensor %}
              {% if w == [] %}
                true
              {% else %}
                is_state(w, 'on')
              {% endif %}
        sequence:
          # --- Night Scene ---
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: scene.create
                    data:
                      scene_id: before_night_scene
                      snapshot_entities: !input light_entity
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ scene_night != [] }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input scene_night
              - conditions:
                  - condition: template
                    value_template: "{{ night_lights != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input night_lights
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id: !input light_entity
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input input_text_last_scene
                      value: "night"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ sun_trigger_text != [] }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: !input sun_trigger_text
                      value: "sun-trigger activated"
          - service: logbook.log
            data:
              name: Motion Control
              message: "Night mode activated via motion/manual."

  # --- GRADUAL OFF AFTER INACTIVITY ---
  - choose:
      - conditions:
          - condition: trigger
            id: motion_off
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ light_entity_list != [] }}"
              - condition: template
                value_template: "{{ day_lights != [] or night_lights != [] }}"
        sequence:
          # Day off
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] and is_state(last_scene_entity, 'day') }}"
                sequence:
                  - delay:
                      seconds: "{{ (on_time_day * 60) | int }}"
                  - condition: state
                    entity_id: !input motion_sensors
                    state: "off"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ day_lights != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input day_lights
                            data:
                              transition: 30
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input light_entity
                            data:
                              transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Day mode gradually turned off after inactivity."
          # Night off
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ last_scene_entity != [] and is_state(last_scene_entity, 'night') }}"
                sequence:
                  - delay:
                      seconds: "{{ (on_time_night * 60) | int }}"
                  - condition: state
                    entity_id: !input motion_sensors
                    state: "off"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ night_lights != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input night_lights
                            data:
                              transition: 30
                      - conditions:
                          - condition: template
                            value_template: "{{ light_entity_list != [] }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: !input light_entity
                            data:
                              transition: 30
                  - service: logbook.log
                    data:
                      name: Motion Control
                      message: "Night mode gradually turned off after inactivity."

  # --- FIXED OFF TIME 1 ---
  - choose:
      - conditions:
          - condition: trigger
            id: fixed_off_1
          - condition: template
            value_template: >
              {% set wd = now().strftime('%a').lower() %}
              {{ wd in fixed_off_weekdays_1 }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light_entity
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input day_lights
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ night_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input night_lights
                    data:
                      transition: 30
          - service: logbook.log
            data:
              name: Motion Control
              message: "Lights turned off at Fixed Off-Time 1: {{ fixed_off_time_1 }}."

  # --- FIXED OFF TIME 2 ---
  - choose:
      - conditions:
          - condition: trigger
            id: fixed_off_2
          - condition: template
            value_template: >
              {% set wd = now().strftime('%a').lower() %}
              {{ wd in fixed_off_weekdays_2 }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ light_entity_list != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light_entity
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input day_lights
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ night_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input night_lights
                    data:
                      transition: 30
          - service: logbook.log
            data:
              name: Motion Control
              message: "Lights turned off at Fixed Off-Time 2: {{ fixed_off_time_2 }}."

  # --- FAILSAFE GRADUAL OFF ---
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_failsafe }}"
          - condition: or
            conditions:
              - condition: trigger
                id: motion_on
              - condition: trigger
                id: light_on
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ light_entity_list != [] }}"
              - condition: template
                value_template: "{{ day_lights != [] or night_lights != [] }}"
        sequence:
          - delay:
              minutes: >
                {% if last_scene_entity != [] %}
                  {% set scene = states(last_scene_entity) %}
                  {{ failsafe_timer_day if scene == 'day' else failsafe_timer_night }}
                {% else %}
                  {{ failsafe_timer_day }}
                {% endif %}
          - condition: state
            entity_id: !input motion_sensors
            state: "off"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input day_lights
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ night_lights != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input night_lights
                    data:
                      transition: 30
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ day_lights == [] and night_lights == [] and light_entity_list != [] }}"
                sequence:
                  - service: light.turn_off
                    target:
                      entity_id: !input light_entity
                    data:
                      transition: 30
          - service: logbook.log
            data:
              name: Motion Control
              message: >
                Failsafe: Lights gradually turned off after timeout. {% if last_scene_entity != [] %}Last scene: {{ states(last_scene_entity) }}.{% endif %}
